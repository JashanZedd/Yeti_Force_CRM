{
    "openapi": "3.0.0",
    "info": {
        "title": "YetiForce API for Webservice App. Type: RestApi",
        "description": "Skip the `/webservice` fragment for connections via ApiProxy. There are two ways to connect to API, with or without rewrite, below are examples of both:\n * rewrite\n * - __CRM_URL__/webservice/RestApi/Users/Login\n * - __CRM_URL__/webservice/RestApi/Accounts/RecordRelatedList/117/Contacts\n * without rewrite\n * - __CRM_URL__/webservice.php?_container=RestApi&module=Users&action=Login\n * - __CRM_URL__/webservice.php?_container=RestApi&module=Accounts&action=RecordRelatedList&record=117&param=Contacts",
        "termsOfService": "https://yetiforce.com/",
        "contact": {
            "name": "Devs API Team",
            "url": "https://yetiforce.com/",
            "email": "devs@yetiforce.com"
        },
        "license": {
            "name": "YetiForce Public License v3",
            "url": "https://yetiforce.com/en/yetiforce/license"
        },
        "version": "0.2"
    },
    "paths": {
        "/webservice/RestApi/Files": {
            "put": {
                "tags": [
                    "BaseAction"
                ],
                "summary": "Download files",
                "description": "Download files from the system",
                "operationId": "Api\\RestApi\\BaseAction\\Files::put",
                "parameters": [
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Action parameters to download the file",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BaseAction_Files_Request"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BaseAction_Files_Request"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File content, mediaType is dynamic depending on the type of file being downloaded",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid method",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/Modules": {
            "get": {
                "tags": [
                    "BaseAction"
                ],
                "summary": "The allowed actions of the module list",
                "description": "Get the permitted module list action, along with their translated action",
                "operationId": "Api\\RestApi\\BaseAction\\Modules::get",
                "parameters": [
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of permitted modules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseAction_Modules_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseAction_Modules_ResponseBody"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No sent token OR Invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions for module",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/Fields": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Get data about fields, blocks and inventory",
                "description": "Returns information about fields, blocks and inventory based on the selected module",
                "operationId": "Api\\RestApi\\BaseModule\\Fields::get",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fields, blocks and inventory details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Fields_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Fields_ResponseBody"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/Privileges": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Get privileges for module",
                "description": "Gets the list of actions that the user has access to in the module",
                "operationId": "Api\\RestApi\\BaseModule\\Privileges::get",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Privileges details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Privileges_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Privileges_ResponseBody"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/Record/{recordId}": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Data for the record",
                "description": "Gets the details of a record",
                "operationId": "getRecord",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "recordId",
                        "in": "path",
                        "description": "Record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    },
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Gets raw data",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "x-parent-id",
                        "in": "header",
                        "description": "Gets parent id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gets data for the record",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Get_Record_Response"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Get_Record_Response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions to remove record OR No permissions to view record OR No permissions to edit record",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No record id OR Record doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Edit record",
                "description": "Retrieves data for editing a record",
                "operationId": "Api\\RestApi\\BaseModule\\Record::put",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "recordId",
                        "in": "path",
                        "description": "Record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Contents of the request contains an associative array with the data record.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Record_Edit_Details"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Record_Edit_Details"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contents of the response contains only id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Put_Record_Response"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Put_Record_Response"
                                }
                            }
                        },
                        "links": {
                            "GetRecordById": {
                                "$ref": "#/components/links/GetRecordById"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Delete record",
                "description": "Changes the state of a record, moving it to the trash",
                "operationId": "Api\\RestApi\\BaseModule\\Record::delete",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "recordId",
                        "in": "path",
                        "description": "Record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of records moved to the trash",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Delete_Record_Response"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Delete_Record_Response"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/Record": {
            "post": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Create record",
                "description": "Gets data to save record",
                "operationId": "Api\\RestApi\\BaseModule\\Record::post",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Contents of the request contains an associative array with the data record.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Record_Edit_Details"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Record_Edit_Details"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contents of the response contains only id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Post_Record_Response"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_Post_Record_Response"
                                }
                            }
                        },
                        "links": {
                            "GetRecordById": {
                                "$ref": "#/components/links/GetRecordById"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/RecordHistory/{recordId}": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Record history",
                "description": "Gets the history of the record",
                "operationId": "Api\\RestApi\\BaseModule\\RecordHistory::get",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "recordId",
                        "in": "path",
                        "description": "Record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "x-row-limit",
                        "in": "header",
                        "description": "Get rows limit, default: 1000",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1000
                    },
                    {
                        "name": "x-row-offset",
                        "in": "header",
                        "description": "Offset, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 0
                    },
                    {
                        "name": "x-start-with",
                        "in": "header",
                        "description": "Show history from given ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 5972
                    },
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Gets raw data",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent activities detail",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordHistory_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordHistory_ResponseBody"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions to view record OR MadTracker is turned off",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Record doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/RecordRelatedList/{recordId}/{relatedModuleName}": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "Related list of records",
                "description": "Gets a list of related records",
                "operationId": "Api\\RestApi\\BaseModule\\RecordRelatedList::get",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "recordId",
                        "in": "path",
                        "description": "Record id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "relatedModuleName",
                        "in": "path",
                        "description": "Related module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "relationId",
                        "in": "query",
                        "description": "Relation id",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cvId",
                        "in": "query",
                        "description": "Custom view id",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Get rows limit, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "x-row-limit",
                        "in": "header",
                        "description": "Get rows limit, default: 1000",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1000
                    },
                    {
                        "name": "x-row-offset",
                        "in": "header",
                        "description": "Offset, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 0
                    },
                    {
                        "name": "x-fields",
                        "in": "header",
                        "description": "JSON array in the list of fields to be returned in response",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "x-condition",
                        "in": "header",
                        "description": "Conditions [Json format]",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Conditions details",
                                    "properties": {
                                        "fieldName": {
                                            "description": "Field name",
                                            "type": "string",
                                            "example": "lastname"
                                        },
                                        "value": {
                                            "description": "Search value",
                                            "type": "string",
                                            "example": "Kowalski"
                                        },
                                        "operator": {
                                            "description": "Field operator",
                                            "type": "string",
                                            "example": "e"
                                        },
                                        "group": {
                                            "description": "Condition group if true is AND",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of consents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordRelatedList_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordRelatedList_ResponseBody"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Relationship does not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions to view record",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Record doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "No relation module name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/{moduleName}/RecordsList": {
            "get": {
                "tags": [
                    "BaseModule"
                ],
                "summary": "List of records",
                "description": "Gets a list of records",
                "operationId": "Api\\RestApi\\BaseModule\\RecordsList::get",
                "parameters": [
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "Module name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Contacts"
                    },
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Get rows limit, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "x-row-limit",
                        "in": "header",
                        "description": "Get rows limit, default: 1000",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 100
                    },
                    {
                        "name": "x-row-offset",
                        "in": "header",
                        "description": "Offset, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 0
                    },
                    {
                        "name": "x-row-order-field",
                        "in": "header",
                        "description": "Sets the ORDER BY part of the query record list",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "lastname"
                    },
                    {
                        "name": "x-row-order",
                        "in": "header",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        },
                        "example": "DESC"
                    },
                    {
                        "name": "x-fields",
                        "in": "header",
                        "description": "JSON array in the list of fields to be returned in response",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "x-condition",
                        "in": "header",
                        "description": "Conditions [Json format]",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Conditions details",
                                    "properties": {
                                        "fieldName": {
                                            "description": "Field name",
                                            "type": "string",
                                            "example": "lastname"
                                        },
                                        "value": {
                                            "description": "Search value",
                                            "type": "string",
                                            "example": "Kowalski"
                                        },
                                        "operator": {
                                            "description": "Field operator",
                                            "type": "string",
                                            "example": "e"
                                        },
                                        "group": {
                                            "description": "Condition group if true is AND",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    {
                        "name": "x-only-column",
                        "in": "header",
                        "description": "Return only column names",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "x-parent-id",
                        "in": "header",
                        "description": "Parent record id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 5
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of consents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordsList_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseModule_RecordsList_ResponseBody"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect json syntax: x-fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No sent token, Invalid token, Token has expired",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions for module",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid method",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/Users/Login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Logs user",
                "description": "Logs user into the system",
                "operationId": "Api\\RestApi\\Users\\Login::post",
                "parameters": [
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UsersLoginRequestBody"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UsersLoginRequestBody"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UsersLoginRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersLoginResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersLoginResponseBody"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid data access OR Invalid user password OR No crmid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid method",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": []
                    }
                ]
            }
        },
        "/webservice/RestApi/Users/Logout": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Logout user",
                "description": "Logout user out the system",
                "operationId": "Api\\RestApi\\Users\\Logout::put",
                "parameters": [
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersLogoutResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersLogoutResponseBody"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/Users/Record/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Data for the user",
                "description": "Gets details about the user",
                "operationId": "Api\\RestApi\\Users\\Record::get",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 116
                    },
                    {
                        "name": "X-ENCRYPTED",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/X-ENCRYPTED"
                        }
                    },
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Gets raw data",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gets data for the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users_Get_Record_Response"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users_Get_Record_Response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied, access for administrators only",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        },
        "/webservice/RestApi/Users/RecordsList": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List of users",
                "description": "Gets a list of all users",
                "operationId": "Api\\RestApi\\Users\\RecordsList::get",
                "parameters": [
                    {
                        "name": "x-raw-data",
                        "in": "header",
                        "description": "Get rows limit, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0,
                                1
                            ]
                        },
                        "example": 1
                    },
                    {
                        "name": "x-row-limit",
                        "in": "header",
                        "description": "Get rows limit, default: 1000",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1000
                    },
                    {
                        "name": "x-row-offset",
                        "in": "header",
                        "description": "Offset, default: 0",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 0
                    },
                    {
                        "name": "x-row-order-field",
                        "in": "header",
                        "description": "Sets the ORDER BY part of the query record list",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "lastname"
                    },
                    {
                        "name": "x-row-order",
                        "in": "header",
                        "description": "Sorting direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ASC",
                                "DESC"
                            ]
                        },
                        "example": "DESC"
                    },
                    {
                        "name": "x-fields",
                        "in": "header",
                        "description": "JSON array in the list of fields to be returned in response",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "x-condition",
                        "in": "header",
                        "description": "Conditions [Json format]",
                        "required": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Conditions details",
                                    "properties": {
                                        "fieldName": {
                                            "description": "Field name",
                                            "type": "string",
                                            "example": "lastname"
                                        },
                                        "value": {
                                            "description": "Search value",
                                            "type": "string",
                                            "example": "Kowalski"
                                        },
                                        "operator": {
                                            "description": "Field operator",
                                            "type": "string",
                                            "example": "e"
                                        },
                                        "group": {
                                            "description": "Condition group if true is AND",
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    {
                        "name": "x-parent-id",
                        "in": "header",
                        "description": "Parent record id",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 5
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of consents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users_RecordsList_ResponseBody"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users_RecordsList_ResponseBody"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect json syntax: x-fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No sent token, Invalid token, Token has expired",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "No permissions for module",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid method",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Exception"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": [],
                        "ApiKeyAuth": [],
                        "token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BaseAction_Files_Request": {
                "title": "Base action - Files request schema",
                "description": "Action parameters to download the file",
                "properties": {
                    "module": {
                        "description": "Put method.",
                        "type": "string",
                        "example": "Documents"
                    },
                    "actionName": {
                        "description": "Put method.",
                        "type": "string",
                        "example": "DownloadFile"
                    },
                    "record": {
                        "description": "Put method.",
                        "type": "integer",
                        "example": 1111
                    },
                    "fileid": {
                        "description": "Put method.",
                        "type": "integer",
                        "example": 333
                    }
                },
                "type": "object"
            },
            "BaseAction_Modules_ResponseBody": {
                "title": "Base action - List of permitted modules",
                "description": "List of available modules",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "List of permitted modules",
                        "type": "object",
                        "additionalProperties": {
                            "description": "Module name",
                            "type": "string",
                            "example": "Accounts"
                        }
                    }
                },
                "type": "object"
            },
            "BaseModule_Fields_ResponseBody": {
                "title": "Base module - Response action fields",
                "description": "Fields, blocks and inventory details",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "Fields parameters",
                        "properties": {
                            "fields": {
                                "description": "List of all available fields in the module",
                                "type": "object",
                                "additionalProperties": {
                                    "properties": {
                                        "name": {
                                            "description": "Field name",
                                            "type": "string",
                                            "example": "subject"
                                        },
                                        "label": {
                                            "description": "Field label translated into the user's language",
                                            "type": "string",
                                            "example": "Subject"
                                        },
                                        "type": {
                                            "description": "Field type",
                                            "type": "string",
                                            "example": "string"
                                        },
                                        "mandatory": {
                                            "description": "Check if field is mandatory",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "defaultvalue": {
                                            "description": "Default field value",
                                            "type": "string",
                                            "example": ""
                                        },
                                        "presence": {
                                            "description": "Check if field is active",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "quickcreate": {
                                            "description": "Check if field is active",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "masseditable": {
                                            "description": "Check if field is quick create enabled",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "header_field": {
                                            "description": "Field configuration available in the header",
                                            "properties": {
                                                "type": {
                                                    "description": "Type",
                                                    "type": "string",
                                                    "example": "value"
                                                },
                                                "class": {
                                                    "description": "Gui class",
                                                    "type": "string",
                                                    "example": "badge-info"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxlengthtext": {
                                            "description": "Max length text",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "maximumlength": {
                                            "description": "Maximum field range",
                                            "type": "string",
                                            "example": "-2147483648,2147483647"
                                        },
                                        "maxwidthcolumn": {
                                            "description": "Max width column",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "tabindex": {
                                            "description": "Field tab index",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "fieldtype": {
                                            "description": "Field short data type",
                                            "type": "string",
                                            "example": "V"
                                        },
                                        "picklistvalues": {
                                            "description": "Picklist values, available only for type of field: picklist, multipicklist, multiowner, multiReferenceValue, inventoryLimit, languages, currencyList, fileLocationType, taxes, multiListFields, mailScannerFields, country, modules, sharedOwner, categoryMultipicklist, tree",
                                            "type": "object"
                                        },
                                        "date-format": {
                                            "description": "Date format, available only for type of field: date, datetime",
                                            "type": "string"
                                        },
                                        "time-format": {
                                            "description": "Time format, available only for type of field: time",
                                            "type": "string"
                                        },
                                        "currency_symbol": {
                                            "description": "Currency symbol, available only for type of field: currency",
                                            "type": "string"
                                        },
                                        "decimal_separator": {
                                            "description": "Currency decimal separator, available only for type of field: currency",
                                            "type": "string"
                                        },
                                        "group_separator": {
                                            "description": "Currency group separator, available only for type of field: currency",
                                            "type": "string"
                                        },
                                        "restrictedDomains": {
                                            "description": "Email restricted domains, available only for type of field: email",
                                            "properties": {
                                                "yeti.com": {
                                                    "description": "List of domains reserved by email",
                                                    "example": "yeti.com"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "limit": {
                                            "description": "Limit the amount of images, available only for type of field: multiImage, image",
                                            "type": "integer"
                                        },
                                        "formats": {
                                            "description": "File Format, available only for type of field: multiImage, image",
                                            "properties": {
                                                "jpg": {
                                                    "description": "List of file data formats",
                                                    "example": "jpg"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "id": {
                                            "description": "Field ID",
                                            "type": "integer",
                                            "example": 24862
                                        },
                                        "uitype": {
                                            "description": "Field UiType",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "isEditable": {
                                            "description": "Check if record is editable",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "isViewable": {
                                            "description": "Check if record is viewable",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "isReadOnly": {
                                            "description": "Check if record is read only (based on profiles)",
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "isEditableReadOnly": {
                                            "description": "Check if record is editable or read only (based on the field type)",
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "sequence": {
                                            "description": "Sequence field",
                                            "type": "integer",
                                            "example": 24862
                                        },
                                        "fieldparams": {
                                            "description": "Field params",
                                            "type": "object"
                                        },
                                        "blockId": {
                                            "description": "Field block id",
                                            "type": "integer",
                                            "example": 280
                                        },
                                        "helpInfo": {
                                            "description": "Additional field description",
                                            "type": "string",
                                            "example": "Edit,Detail"
                                        },
                                        "dbStructure": {
                                            "description": "Info about field structure in database",
                                            "type": "object"
                                        },
                                        "queryOperators": {
                                            "description": "Field query operators",
                                            "type": "object"
                                        },
                                        "isEmptyPicklistOptionAllowed": {
                                            "description": "Defines empty picklist element availability",
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "referenceList": {
                                            "description": "List of related modules, available only for reference field",
                                            "type": "object",
                                            "additionalProperties": {
                                                "description": "Tree item",
                                                "type": "string",
                                                "example": "Accounts"
                                            }
                                        },
                                        "treeValues": {
                                            "description": "Tree items, available only for tree field",
                                            "type": "object",
                                            "additionalProperties": {
                                                "description": "Tree item",
                                                "properties": {
                                                    "id": {
                                                        "description": "Number tree without prefix",
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "tree": {
                                                        "description": "Tree id",
                                                        "type": "string",
                                                        "example": "T10"
                                                    },
                                                    "parent": {
                                                        "description": "Parent tree id",
                                                        "type": "string",
                                                        "example": "T1"
                                                    },
                                                    "text": {
                                                        "description": "Tree value",
                                                        "type": "string",
                                                        "example": "Tree value"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "blocks": {
                                "description": "List of all available blocks in the module",
                                "type": "object",
                                "additionalProperties": {
                                    "description": "Block details",
                                    "properties": {
                                        "id": {
                                            "description": "Block id",
                                            "type": "integer",
                                            "example": 195
                                        },
                                        "tabid": {
                                            "description": "Module id",
                                            "type": "integer",
                                            "example": 9
                                        },
                                        "label": {
                                            "description": "Block label",
                                            "type": "string",
                                            "example": "Account details"
                                        },
                                        "sequence": {
                                            "description": "Block sequence",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "showtitle": {
                                            "description": "Specifies whether the title should be visible",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "visible": {
                                            "description": "Determines the visibility",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "increateview": {
                                            "description": "Determines the visibility in creat view",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "ineditview": {
                                            "description": "Determines the visibility in edit view",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "indetailview": {
                                            "description": "Determines the visibility in detail view",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "display_status": {
                                            "description": "Determines whether the block should be expanded",
                                            "type": "integer",
                                            "example": 2
                                        },
                                        "iscustom": {
                                            "description": "Determines if the block has been added by the user",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "icon": {
                                            "description": "Block icon class",
                                            "type": "string",
                                            "example": "far fa-calendar-alt"
                                        },
                                        "name": {
                                            "description": "Block name translated into the user's language",
                                            "type": "string",
                                            "example": "Informacje podstawowe o firmie"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "inventory": {
                                "description": "Inventory field group, available depending on the type of module",
                                "properties": {
                                    "1": {
                                        "description": "Inventory field list",
                                        "type": "object",
                                        "additionalProperties": {
                                            "description": "Inventory field details",
                                            "properties": {
                                                "label": {
                                                    "description": "Field label translated into the user's language",
                                                    "type": "string",
                                                    "example": "Unit price"
                                                },
                                                "type": {
                                                    "description": "Field type",
                                                    "type": "string",
                                                    "example": "UnitPrice"
                                                },
                                                "columnname": {
                                                    "description": "Field column name in db",
                                                    "type": "string",
                                                    "example": "price"
                                                },
                                                "isSummary": {
                                                    "description": "Is the field contains summary",
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "isVisibleInDetail": {
                                                    "description": "Check if field is visible in detail view",
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BaseModule_Privileges_ResponseBody": {
                "title": "Base module - Privileges response schema",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "List of module privileges",
                        "type": "object",
                        "example": {
                            "Import": true,
                            "Export": true
                        },
                        "additionalProperties": {
                            "description": "Action",
                            "type": "boolean"
                        }
                    }
                },
                "type": "object"
            },
            "BaseModule_Get_Record_Response": {
                "title": "Base module - Response body for Record",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "Record data",
                        "properties": {
                            "name": {
                                "description": "Record name",
                                "type": "string",
                                "example": "Driving school"
                            },
                            "id": {
                                "description": "Record Id",
                                "type": "integer",
                                "example": 152
                            },
                            "fields": {
                                "description": "System field names and field labels",
                                "type": "object",
                                "additionalProperties": {
                                    "description": "Field label",
                                    "type": "boolean",
                                    "example": "Account name"
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/Record_Display_Details"
                            },
                            "privileges": {
                                "description": "Parameters determining checking of editing rights and moving to the trash",
                                "properties": {
                                    "isEditable": {
                                        "description": "Check if record is editable",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "moveToTrash": {
                                        "description": "Permission to delete",
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            },
                            "inventory": {
                                "description": "Value inventory data",
                                "type": "object"
                            },
                            "summaryInventory": {
                                "description": "Value summary inventory data",
                                "type": "object"
                            },
                            "rawData": {
                                "$ref": "#/components/schemas/Record_Raw_Details"
                            },
                            "rawInventory": {
                                "description": "Inventory data",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BaseModule_Delete_Record_Response": {
                "title": "Base module - Transfer to the trash",
                "description": "List of records moved to the trash",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "description": "Status of successful transfer of the record to the recycle bin",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "BaseModule_Put_Record_Response": {
                "title": "Base module - Response body for Record",
                "description": "Contents of the response contains only id",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "title": "Gets data for the record",
                        "description": "Updated record id.",
                        "properties": {
                            "id": {
                                "description": "Id of the newly created record",
                                "type": "integer",
                                "example": 22
                            },
                            "skippedData": {
                                "description": "List of parameters passed in the request that were skipped in the write process",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Record_Edit_Details": {
                "title": "Record edit details",
                "description": "Record data in user format for edit view",
                "type": "object",
                "example": {
                    "field_name_1": "Tom",
                    "field_name_2": "Kowalski",
                    "assigned_user_id": 1,
                    "createdtime": "2014-09-24 20:51:12"
                }
            },
            "Record_Raw_Details": {
                "title": "Record raw details",
                "description": "Record data in the system format as stored in a database",
                "type": "object",
                "example": {
                    "id": 11,
                    "field_name_1": "Tom",
                    "field_name_2": "Kowalski",
                    "assigned_user_id": 1,
                    "createdtime": "2014-09-24 20:51:12"
                }
            },
            "Record_Display_Details": {
                "title": "Record display details",
                "description": "Record data in user format for preview",
                "type": "object",
                "example": {
                    "id": 11,
                    "field_name_1": "Tom",
                    "field_name_2": "Kowalski",
                    "assigned_user_id": "YetiForce Administrator",
                    "createdtime": "2014-09-24 20:51"
                }
            },
            "BaseModule_Post_Record_Response": {
                "title": "Base module - Created records",
                "description": "Contents of the response contains only id",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "title": "Gets data for the record",
                        "description": "Created record id.",
                        "properties": {
                            "id": {
                                "description": "Id of the newly created record",
                                "type": "integer",
                                "example": 22
                            },
                            "skippedData": {
                                "description": "List of parameters passed in the request that were skipped in the write process",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BaseModule_RecordHistory_ResponseBody": {
                "title": "Base module - Response action history record",
                "description": "Action module for recent activities in CRM",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "Returns recent activities that took place in CRM",
                        "properties": {
                            "response": {
                                "description": "Contains what actions have been performed and returns the data that has changed",
                                "type": "object",
                                "additionalProperties": {
                                    "description": "Key indicating the number of changes made to a given record",
                                    "properties": {
                                        "time": {
                                            "description": "Showing the exact date on which the change took place",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-10-07 08:32:38"
                                        },
                                        "owner": {
                                            "description": "Username of the user who made the change",
                                            "type": "string",
                                            "example": "System Admin"
                                        },
                                        "status": {
                                            "description": "Name of the action that was carried out",
                                            "type": "string",
                                            "example": "changed"
                                        },
                                        "rawTime": {
                                            "description": "Showing the exact date on which the change took place",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2019-10-07 08:32:38"
                                        },
                                        "rawOwner": {
                                            "description": "User ID of the user who made the change",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "rawStatus": {
                                            "description": "The name of the untranslated label",
                                            "type": "string",
                                            "example": "LBL_UPDATED"
                                        },
                                        "data": {
                                            "description": "Field system name",
                                            "type": "object",
                                            "additionalProperties": {
                                                "properties": {
                                                    "from": {
                                                        "description": "Value before change, dynamically collected value - the data type depends on the field type",
                                                        "type": "string",
                                                        "example": "Jan Kowalski"
                                                    },
                                                    "to": {
                                                        "description": "Value after change, dynamically collected value - the data type depends on the field type",
                                                        "type": "string",
                                                        "example": "Jan Nowak"
                                                    },
                                                    "rawFrom": {
                                                        "description": "Value before change",
                                                        "type": "string",
                                                        "example": "Jan Kowalski"
                                                    },
                                                    "rawTo": {
                                                        "description": "Value after change",
                                                        "type": "string",
                                                        "example": "Jan Nowak"
                                                    },
                                                    "targetModule": {
                                                        "description": "The name of the target related module",
                                                        "type": "string",
                                                        "example": "Contacts"
                                                    },
                                                    "targetLabel": {
                                                        "description": "The label name of the target related module",
                                                        "type": "string",
                                                        "example": "Jan Kowalski"
                                                    },
                                                    "targetId": {
                                                        "description": "Id of the target related module",
                                                        "type": "integer",
                                                        "example": 394
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BaseModule_RecordRelatedList_ResponseBody": {
                "title": "Base module - Response action related record list",
                "description": "Module action related record list response body",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "description": "List of related records",
                        "properties": {
                            "headers": {
                                "description": "Column names",
                                "type": "object",
                                "additionalProperties": {}
                            },
                            "records": {
                                "description": "Records display details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Display_Details"
                                }
                            },
                            "rawData": {
                                "description": "Records raw details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Raw_Details"
                                }
                            },
                            "count": {
                                "description": "Get related record list method.",
                                "type": "string",
                                "example": 54
                            },
                            "isMorePages": {
                                "description": "Get related record list method.",
                                "type": "boolean",
                                "example": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BaseModule_RecordsList_ResponseBody": {
                "title": "Base module - Response action record list",
                "description": "Module action record list response body",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "description": "List of records",
                        "properties": {
                            "headers": {
                                "description": "Column names",
                                "type": "object",
                                "additionalProperties": {}
                            },
                            "records": {
                                "description": "Records display details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Display_Details"
                                }
                            },
                            "rawData": {
                                "description": "Records raw details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Raw_Details"
                                }
                            },
                            "numberOfRecords": {
                                "description": "Number of records on the page",
                                "type": "string",
                                "example": 54
                            },
                            "isMorePages": {
                                "description": "There are more pages",
                                "type": "boolean",
                                "example": true
                            },
                            "numberOfAllRecords": {
                                "description": "Number of all records, dependent on the header `x-row-count`",
                                "type": "string",
                                "example": 54
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "X-ENCRYPTED": {
                "description": "Is the content request is encrypted",
                "type": "string",
                "default": 0,
                "enum": [
                    0,
                    1
                ]
            },
            "UsersLoginRequestBody": {
                "title": "Users module - Users login request body",
                "description": "JSON or form-data",
                "properties": {
                    "userName": {
                        "description": "Webservice user name",
                        "type": "string"
                    },
                    "password": {
                        "description": "Webservice user password",
                        "type": "string"
                    },
                    "params": {
                        "description": "Additional parameters sent by the user, extending the current settings, e.g. language",
                        "properties": {
                            "language": {
                                "description": "Post method.",
                                "type": "string",
                                "example": "pl-PL"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UsersLoginResponseBody": {
                "title": "Users module - Users login response body",
                "description": "Users login response body",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "Content of responses from a given method",
                        "properties": {
                            "token": {
                                "description": "Post method.",
                                "type": "string",
                                "maxLength": 40,
                                "minLength": 40
                            },
                            "name": {
                                "description": "Post method.",
                                "type": "string"
                            },
                            "lastLoginTime": {
                                "description": "Post method.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2019-10-07 08:32:38"
                            },
                            "lastLogoutTime": {
                                "description": "Post method.",
                                "type": "string",
                                "format": "date-time",
                                "example": null
                            },
                            "language": {
                                "description": "Post method.",
                                "type": "string",
                                "example": "pl-PL"
                            },
                            "type": {
                                "description": "Post method.",
                                "type": "integer"
                            },
                            "logged": {
                                "description": "Post method.",
                                "type": "boolean"
                            },
                            "preferences": {
                                "description": "Post method.",
                                "properties": {
                                    "hour_format": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "24"
                                    },
                                    "start_hour": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "08:00"
                                    },
                                    "end_hour": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "16:00"
                                    },
                                    "date_format": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "yyyy-mm-dd"
                                    },
                                    "time_zone": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "Europe/Warsaw"
                                    },
                                    "currency_id": {
                                        "description": "Post method.",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "currency_grouping_pattern": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "123,456,789"
                                    },
                                    "currency_decimal_separator": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "."
                                    },
                                    "currency_grouping_separator": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": " "
                                    },
                                    "currency_symbol_placement": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "1.0$"
                                    },
                                    "no_of_currency_decimals": {
                                        "description": "Post method.",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "currency_name": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "Poland, Zlotych"
                                    },
                                    "currency_code": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "PLN"
                                    },
                                    "currency_symbol": {
                                        "description": "Post method.",
                                        "type": "string",
                                        "example": "zł"
                                    },
                                    "conv_rate": {
                                        "description": "Post method.",
                                        "type": "number",
                                        "format": "float",
                                        "example": "1.00000"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Exception": {
                "title": "Error exception",
                "properties": {
                    "status": {
                        "description": "0 - error",
                        "type": "integer",
                        "enum": [
                            0
                        ],
                        "example": 0
                    },
                    "error": {
                        "description": "Error  details",
                        "properties": {
                            "message": {
                                "description": "To show more details turn on: config\\Debug.php apiShowExceptionMessages = true",
                                "type": "string",
                                "example": "Invalid method"
                            },
                            "code": {
                                "description": "Post method.",
                                "type": "integer",
                                "example": 405
                            },
                            "file": {
                                "description": "default disabled to enable set: config\\Debug.php apiShowExceptionBacktrace = true",
                                "type": "string",
                                "example": "api\\webservice\\RestApi\\BaseAction\\Files.php"
                            },
                            "line": {
                                "description": "default disabled to enable set: config\\Debug.php apiShowExceptionBacktrace = true",
                                "type": "integer",
                                "example": 101
                            },
                            "backtrace": {
                                "description": "default disabled to enable set: config\\Debug.php apiShowExceptionBacktrace = true",
                                "type": "string",
                                "example": "#0 api\\webservice\\RestApi\\BaseAction\\Files.php (101) ...."
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UsersLogoutResponseBody": {
                "title": "Users module - Users logout response body",
                "description": "JSON data",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "Content of responses from a given method",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Users_Get_Record_Response": {
                "title": "Users - Response body for user",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    },
                    "result": {
                        "description": "User data",
                        "properties": {
                            "name": {
                                "description": "User label",
                                "type": "string",
                                "example": "System Admin"
                            },
                            "id": {
                                "description": "User Id",
                                "type": "integer",
                                "example": 1
                            },
                            "fields": {
                                "description": "Field name items",
                                "type": "object"
                            },
                            "data": {
                                "description": "User data",
                                "type": "object"
                            },
                            "privileges": {
                                "description": "Parameters determining checking of editing rights and moving to the trash",
                                "properties": {
                                    "isEditable": {
                                        "description": "Check if user is editable",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "moveToTrash": {
                                        "description": "Permission to delete",
                                        "type": "boolean",
                                        "example": false
                                    }
                                },
                                "type": "object"
                            },
                            "rawData": {
                                "description": "Raw user data",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Users_RecordsList_ResponseBody": {
                "title": "Users - Response action users list",
                "description": "Module action record list response body",
                "properties": {
                    "status": {
                        "description": "A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "result": {
                        "description": "List of records",
                        "properties": {
                            "headers": {
                                "description": "Column names",
                                "type": "object",
                                "additionalProperties": {}
                            },
                            "records": {
                                "description": "Records display details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Display_Details"
                                }
                            },
                            "rawData": {
                                "description": "Records raw details",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Record_Raw_Details"
                                }
                            },
                            "count": {
                                "description": "Get users list method.",
                                "type": "string",
                                "example": 54
                            },
                            "isMorePages": {
                                "description": "Get users list method.",
                                "type": "boolean",
                                "example": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "description": "Basic Authentication header",
                "scheme": "basic"
            },
            "ApiKeyAuth": {
                "type": "apiKey",
                "description": "Webservice api key header",
                "name": "X-API-KEY",
                "in": "header"
            },
            "token": {
                "type": "apiKey",
                "description": "Webservice api token by user header",
                "name": "X-TOKEN",
                "in": "header"
            }
        },
        "links": {
            "GetRecordById": {
                "operationId": "getRecord",
                "parameters": {
                    "recordId": "$response.body#/result/id"
                },
                "description": "The `id` value returned in the response can be used as the `recordId` parameter in `GET /webservice/{moduleName}/Record/{recordId}`."
            }
        }
    },
    "tags": [
        {
            "name": "BaseModule",
            "description": "Access to record methods"
        },
        {
            "name": "Users",
            "description": "Access to user methods"
        }
    ]
}