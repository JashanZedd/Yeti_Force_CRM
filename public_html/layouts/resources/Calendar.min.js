'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

/** Class representing a calendar. */

window.Calendar_Js = function () {
	/**
  * Create calendar's options.
  * @param {jQuery} container
  * @param {bool} readonly
  */
	function _class() {
		var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $('.js-base-container');
		var readonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		var browserHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
		classCallCheck(this, _class);

		this.calendarView = false;
		this.calendarCreateView = false;
		this.container = container;
		this.readonly = readonly;
		this.eventCreate = app.getMainParams('eventCreate');
		this.eventEdit = app.getMainParams('eventEdit');
		this.browserHistory = !readonly && browserHistory;
		this.browserHistoryConfig = this.browserHistory ? {} : this.setBrowserHistoryOptions();
		this.calendarOptions = this.setCalendarOptions();
		this.eventTypeKeyName = false;
		this.module = app.getModuleName();
	}

	/**
  * Set calendar's options.
  * @returns {object}
  */


	createClass(_class, [{
		key: 'setCalendarOptions',
		value: function setCalendarOptions() {
			return Object.assign(this.setCalendarBasicOptions(), this.setCalendarAdvancedOptions(), this.setCalendarModuleOptions(), this.browserHistoryConfig);
		}

		/**
   * Set calendar's basic options.
   * @returns {object}
   */

	}, {
		key: 'setCalendarBasicOptions',
		value: function setCalendarBasicOptions() {
			var eventLimit = app.getMainParams('eventLimit'),
			    userDefaultActivityView = app.getMainParams('activity_view'),
			    defaultView = app.moduleCacheGet('defaultView'),
			    userDefaultTimeFormat = CONFIG.hourFormat;
			if (eventLimit == 'true') {
				eventLimit = true;
			} else if (eventLimit == 'false') {
				eventLimit = false;
			} else {
				eventLimit = parseInt(eventLimit) + 1;
			}
			if (userDefaultActivityView === 'Today') {
				userDefaultActivityView = app.getMainParams('dayView');
			} else if (userDefaultActivityView === 'This Week') {
				userDefaultActivityView = app.getMainParams('weekView');
			} else {
				userDefaultActivityView = 'month';
			}
			if (defaultView != null) {
				userDefaultActivityView = defaultView;
			}
			if (userDefaultTimeFormat == 24) {
				userDefaultTimeFormat = 'H:mm';
			} else {
				userDefaultTimeFormat = 'h:mmt';
			}
			var options = {
				timeFormat: userDefaultTimeFormat,
				slotLabelFormat: userDefaultTimeFormat,
				defaultView: userDefaultActivityView,
				slotMinutes: 15,
				defaultEventMinutes: 0,
				forceEventDuration: true,
				defaultTimedEventDuration: '01:00:00',
				eventLimit: eventLimit,
				eventLimitText: app.vtranslate('JS_MORE'),
				selectHelper: true,
				scrollTime: app.getMainParams('startHour') + ':00',
				monthNamesShort: [app.vtranslate('JS_JAN'), app.vtranslate('JS_FEB'), app.vtranslate('JS_MAR'), app.vtranslate('JS_APR'), app.vtranslate('JS_MAY'), app.vtranslate('JS_JUN'), app.vtranslate('JS_JUL'), app.vtranslate('JS_AUG'), app.vtranslate('JS_SEP'), app.vtranslate('JS_OCT'), app.vtranslate('JS_NOV'), app.vtranslate('JS_DEC')],
				dayNames: [app.vtranslate('JS_SUNDAY'), app.vtranslate('JS_MONDAY'), app.vtranslate('JS_TUESDAY'), app.vtranslate('JS_WEDNESDAY'), app.vtranslate('JS_THURSDAY'), app.vtranslate('JS_FRIDAY'), app.vtranslate('JS_SATURDAY')],
				buttonText: {
					today: app.vtranslate('JS_CURRENT'),
					year: app.vtranslate('JS_YEAR'),
					month: app.vtranslate('JS_MONTH'),
					week: app.vtranslate('JS_WEEK'),
					day: app.vtranslate('JS_DAY')
				},
				allDayText: app.vtranslate('JS_ALL_DAY')
			};
			if (app.moduleCacheGet('start') !== null) {
				var s = moment(app.moduleCacheGet('start')).valueOf();
				var e = moment(app.moduleCacheGet('end')).valueOf();
				options.defaultDate = moment(moment(s + (e - s) / 2).format('YYYY-MM-DD'));
			}
			return Object.assign(this.setCalendarMinimalOptions(), options);
		}

		/**
   * Converts the date format.
   * @param {string} partOfDate
   */

	}, {
		key: 'parseDateFormat',
		value: function parseDateFormat(partOfDate) {
			var parseMonthFormat = {
				'yyyy-mm-dd': 'YYYY-MMMM',
				'mm-dd-yyyy': 'MMMM-YYYY',
				'dd-mm-yyyy': 'MMMM-YYYY',
				'yyyy.mm.dd': 'YYYY.MMMM',
				'mm.dd.yyyy': 'MMMM.YYYY',
				'dd.mm.yyyy': 'MMMM.YYYY',
				'yyyy/mm/dd': 'YYYY/MMMM',
				'mm/dd/yyyy': 'MMMM/YYYY',
				'dd/mm/yyyy': 'MMMM/YYYY'
			};
			var parseWeekAndDayFormat = {
				'yyyy-mm-dd': 'YYYY-MMM-D',
				'mm-dd-yyyy': 'MMM-D-YYYY',
				'dd-mm-yyyy': 'D-MMM-YYYY',
				'yyyy.mm.dd': 'YYYY.MMM.D',
				'mm.dd.yyyy': 'MMM.D.YYYY',
				'dd.mm.yyyy': 'D.MMM.YYYY',
				'yyyy/mm/dd': 'YYYY/MMM/D',
				'mm/dd/yyyy': 'MMM/D/YYYY',
				'dd/mm/yyyy': 'D/MMM/YYYY'
			};
			var formatDate = CONFIG.dateFormat;
			switch (partOfDate) {
				case 'month':
					return parseMonthFormat[formatDate];
					break;
				case 'week':
					return parseWeekAndDayFormat[formatDate];
					break;
				case 'day':
					return parseWeekAndDayFormat[formatDate];
					break;
			}
		}

		/**
   * Set calendar's minimal options.
   * @returns {object}
   */

	}, {
		key: 'setCalendarMinimalOptions',
		value: function setCalendarMinimalOptions() {
			var hiddenDays = [];
			if (app.getMainParams('switchingDays') === 'workDays') {
				hiddenDays = app.getMainParams('hiddenDays', true);
			}
			return {
				firstDay: CONFIG.firstDayOfWeekNo,
				selectable: true,
				hiddenDays: hiddenDays,
				monthNames: [app.vtranslate('JS_JANUARY'), app.vtranslate('JS_FEBRUARY'), app.vtranslate('JS_MARCH'), app.vtranslate('JS_APRIL'), app.vtranslate('JS_MAY'), app.vtranslate('JS_JUNE'), app.vtranslate('JS_JULY'), app.vtranslate('JS_AUGUST'), app.vtranslate('JS_SEPTEMBER'), app.vtranslate('JS_OCTOBER'), app.vtranslate('JS_NOVEMBER'), app.vtranslate('JS_DECEMBER')],
				dayNamesShort: [app.vtranslate('JS_SUN'), app.vtranslate('JS_MON'), app.vtranslate('JS_TUE'), app.vtranslate('JS_WED'), app.vtranslate('JS_THU'), app.vtranslate('JS_FRI'), app.vtranslate('JS_SAT')]
			};
		}

		/**
   * Set calendar's advanced options.
   * @returns {object}
   */

	}, {
		key: 'setCalendarAdvancedOptions',
		value: function setCalendarAdvancedOptions() {
			var self = this;
			return {
				editable: !this.readonly && this.eventEdit,
				selectable: !this.readonly && this.eventCreate,
				header: {
					left: 'month,' + app.getMainParams('weekView') + ',' + app.getMainParams('dayView'),
					center: 'title today',
					right: 'prev,next'
				},
				allDaySlot: app.getMainParams('allDaySlot'),
				views: {
					basic: {
						eventLimit: false
					},
					month: {
						titleFormat: this.parseDateFormat('month')
					},
					week: {
						titleFormat: this.parseDateFormat('week')
					},
					day: {
						titleFormat: this.parseDateFormat('day')
					}
				},
				eventDrop: function eventDrop(event, delta, revertFunc) {
					self.updateEvent(event, delta, revertFunc);
				},
				eventResize: function eventResize(event, delta, revertFunc) {
					self.updateEvent(event, delta, revertFunc);
				},
				viewRender: function viewRender() {
					self.loadCalendarData();
				},
				eventRender: self.eventRenderer,
				height: this.setCalendarHeight(this.container)
			};
		}

		/**
   * Update calendar's event.
   * @param {Object} event
   * @param {Object} delta
   * @param {Object} revertFunc
   */

	}, {
		key: 'updateEvent',
		value: function updateEvent(event, delta, revertFunc) {
			var progressInstance = jQuery.progressIndicator({ blockInfo: { enabled: true } });
			var start = event.start.format();
			var params = {
				module: CONFIG.module,
				action: 'Calendar',
				mode: 'updateEvent',
				id: event.id,
				start: start,
				delta: delta._data,
				allDay: event.allDay
			};
			AppConnector.request(params).done(function (response) {
				if (!response['result']) {
					Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_NO_EDIT_PERMISSION'));
					revertFunc();
				} else {
					window.popoverCache = {};
				}
				progressInstance.progressIndicator({ mode: 'hide' });
			}).fail(function () {
				progressInstance.progressIndicator({ mode: 'hide' });
				Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_NO_EDIT_PERMISSION'));
				revertFunc();
			});
		}

		/**
   * Render event.
   * @param {Object} event
   * @param {jQuery} element
   */

	}, {
		key: 'eventRenderer',
		value: function eventRenderer(event, element) {
			element.find('.fc-title').html(event.title);
			if (event.rendering === 'background') {
				element.append('<span class="js-popover-text d-block"><span class="' + event.icon + ' js-popover-icon mr-1"></span>' + event.title + '</span>');
				element.addClass('js-popover-tooltip--ellipsis').attr('data-content', event.title);
				app.registerPopoverEllipsis({ element: element });
			}
		}

		/**
   * Returns counted calendar height.
   * @returns {(number|string)}
   */

	}, {
		key: 'setCalendarHeight',
		value: function setCalendarHeight() {
			var _this = this;

			var defaultHeightValue = 'auto';
			if ($(window).width() > 993) {
				var calendarContainer = this.container.find('.js-calendar__container'),
				    calendarPadding = void 0;
				if (this.container.hasClass('js-modal-container')) {
					calendarPadding = this.container.find('.js-modal-header').outerHeight(); // modal needs bigger padding to prevent modal's scrollbar
				} else {
					calendarPadding = this.container.find('.js-contents-div').css('margin-left').replace('px', ''); //equals calendar padding bottom to left margin
				}
				var setCalendarH = function setCalendarH() {
					return $(window).height() - _this.container.find('.js-calendar__container').offset().top - $('.js-footer').height() - calendarPadding;
				};
				new ResizeSensor(this.container.find('.contentsDiv'), function () {
					calendarContainer.fullCalendar('option', 'height', setCalendarH());
				});
			}
			return defaultHeightValue;
		}

		/**
   * Set calendar module's options.
   * @returns {object}
   */

	}, {
		key: 'setCalendarModuleOptions',
		value: function setCalendarModuleOptions() {
			return {};
		}

		/**
   * Set calendar options from browser history.
   * @returns {object}
   */

	}, {
		key: 'setBrowserHistoryOptions',
		value: function setBrowserHistoryOptions() {
			var historyParams = app.getMainParams('historyParams', true),
			    options = null;
			if (historyParams && (historyParams.length || Object.keys(historyParams).length)) {
				options = {
					start: historyParams.start,
					end: historyParams.end,
					user: historyParams.user.split(',').map(function (x) {
						return parseInt(x);
					}),
					time: historyParams.time,
					hiddenDays: historyParams.hiddenDays.split(',').map(function (x) {
						var parsedValue = parseInt(x);
						return isNaN(parsedValue) ? '' : parsedValue;
					}),
					cvid: historyParams.cvid,
					defaultView: historyParams.viewType
				};
				var dateFormat = CONFIG.dateFormat.toUpperCase();
				var s = moment(options.start, dateFormat).valueOf();
				var e = moment(options.end, dateFormat).valueOf();
				options.defaultDate = moment(moment(s + (e - s) / 2).format('YYYY-MM-DD'));
				Object.keys(options).forEach(function (key) {
					return options[key] === 'undefined' && delete options[key];
				});
				app.moduleCacheSet('browserHistoryEvent', false);
				app.setMainParams('showType', options.time);
				app.setMainParams('usersId', options.user);
				app.setMainParams('defaultView', options.defaultView);
			}
			window.addEventListener('popstate', function (event) {
				app.moduleCacheSet('browserHistoryEvent', true);
			}, false);
			return options;
		}

		/**
   * Register events.
   * @returns {object}
   */

	}, {
		key: 'registerEvents',
		value: function registerEvents() {
			this.renderCalendar();
			this.registerSitebarEvents();
			this.registerButtonSelectAll();
			this.registerAddButton();
		}

		/**
   * Invokes fullcalendar with options.
   */

	}, {
		key: 'renderCalendar',
		value: function renderCalendar() {
			this.getCalendarView().fullCalendar(this.calendarOptions);
		}

		/**
   * Register sitebar events.
   */

	}, {
		key: 'registerSitebarEvents',
		value: function registerSitebarEvents() {
			var _this2 = this;

			$('.bodyContents').on('Vtiger.Widget.Load.undefined', function () {
				_this2.registerSelect2Event();
			});
		}

		/**
   * Load calendar data
   */

	}, {
		key: 'loadCalendarData',
		value: function loadCalendarData() {
			var _this3 = this;

			var defaultParams = this.getDefaultParams();
			this.getCalendarView().fullCalendar('removeEvents');
			if (!defaultParams.emptyFilters) {
				var progressInstance = $.progressIndicator();
				AppConnector.request(defaultParams).done(function (events) {
					_this3.getCalendarView().fullCalendar('addEventSource', events.result);
					progressInstance.hide();
				});
			}
		}

		/**
   * Default params
   * @returns {{module: *, action: string, mode: string, start: *, end: *, user: *, emptyFilters: boolean}}
   */

	}, {
		key: 'getDefaultParams',
		value: function getDefaultParams() {
			var formatDate = CONFIG.dateFormat.toUpperCase(),
			    view = this.getCalendarView().fullCalendar('getView'),
			    users = app.moduleCacheGet('calendar-users') || CONFIG.userId;
			var params = {
				module: CONFIG.module,
				action: 'Calendar',
				mode: 'getEvents',
				start: view.start.format(formatDate),
				end: view.end.format(formatDate),
				user: users,
				emptyFilters: users.length === 0
			};
			if (app.moduleCacheGet('calendar-types')) {
				params.types = app.moduleCacheGet('calendar-types');
				params.emptyFilters = users.length === 0 || params.types.length === 0;
			} else {
				params.types = [];
			}
			return params;
		}

		/**
   * Register select2 event.
   */

	}, {
		key: 'registerSelect2Event',
		value: function registerSelect2Event() {
			var self = this;
			$('.siteBarRight .js-calendar__filter__select').each(function () {
				var element = $(this);
				var name = element.data('cache');
				var cachedValue = app.moduleCacheGet(name);
				if (element.length > 0 && cachedValue !== undefined) {
					if (element.prop('tagName') == 'SELECT') {
						element.val(cachedValue);
					}
				} else if (element.length > 0 && cachedValue === undefined && !element.find(':selected').length) {
					var allOptions = [];
					element.find('option').each(function (i, option) {
						allOptions.push($(option).val());
					});
					element.val(allOptions);
					app.moduleCacheSet(name, cachedValue);
				}
			});
			var selectsElements = $('.siteBarRight .select2, .siteBarRight .filterField');
			selectsElements.off('change');
			App.Fields.Picklist.showSelect2ElementView(selectsElements);
			selectsElements.on('change', function () {
				var element = $(this);
				var value = element.val();
				if (value == null) {
					value = '';
				}
				if (element.attr('type') == 'checkbox') {
					value = element.is(':checked');
				}
				app.moduleCacheSet(element.data('cache'), value);
				self.loadCalendarData();
			});
		}

		/**
   * Register button select all.
   */

	}, {
		key: 'registerButtonSelectAll',
		value: function registerButtonSelectAll() {
			var selectBtn = $('.selectAllBtn');
			selectBtn.on('click', function (e) {
				var selectAllLabel = $(this).find('.selectAll');
				var deselectAllLabel = $(this).find('.deselectAll');
				if (selectAllLabel.hasClass('d-none')) {
					selectAllLabel.removeClass('d-none');
					deselectAllLabel.addClass('d-none');
					$(this).closest('.quickWidget').find('select option').prop('selected', false);
				} else {
					$(this).closest('.quickWidget').find('select option').prop('selected', true);
					deselectAllLabel.removeClass('d-none');
					selectAllLabel.addClass('d-none');
				}
				$(this).closest('.quickWidget').find('select').trigger('change');
			});
		}

		/**
   * Register add button.
   */

	}, {
		key: 'registerAddButton',
		value: function registerAddButton() {
			var self = this;
			$('.js-add').on('click', function (e) {
				self.getCalendarCreateView().done(function (data) {
					var headerInstance = new Vtiger_Header_Js();
					headerInstance.handleQuickCreateData(data, {
						callbackFunction: function callbackFunction(data) {
							self.addCalendarEvent(data.result);
						}
					});
				});
			});
		}

		/**
   * Get calendar create view.
   * @returns {promise}
   */

	}, {
		key: 'getCalendarCreateView',
		value: function getCalendarCreateView() {
			var self = this;
			var aDeferred = jQuery.Deferred();

			if (this.calendarCreateView !== false) {
				aDeferred.resolve(this.calendarCreateView.clone(true, true));
				return aDeferred.promise();
			}
			var progressInstance = jQuery.progressIndicator();
			this.loadCalendarCreateView().done(function (data) {
				progressInstance.hide();
				self.calendarCreateView = data;
				aDeferred.resolve(data.clone(true, true));
			}).fail(function () {
				progressInstance.hide();
			});
			return aDeferred.promise();
		}

		/**
   * Load calendar create view.
   * @returns {promise}
   */

	}, {
		key: 'loadCalendarCreateView',
		value: function loadCalendarCreateView() {
			var aDeferred = jQuery.Deferred();
			var moduleName = app.getModuleName();
			var url = 'index.php?module=' + moduleName + '&view=QuickCreateAjax';
			var headerInstance = Vtiger_Header_Js.getInstance();
			headerInstance.getQuickCreateForm(url, moduleName).done(function (data) {
				aDeferred.resolve(jQuery(data));
			}).fail(function (textStatus, errorThrown) {
				aDeferred.reject(textStatus, errorThrown);
			});
			return aDeferred.promise();
		}

		/**
   * Add event data to render.
   */

	}, {
		key: 'getEventRenderData',
		value: function getEventRenderData(calendarDetails) {
			var calendar = this.getCalendarView();
			var eventObject = {
				id: calendarDetails._recordId,
				title: calendarDetails._recordLabel,
				start: calendar.fullCalendar('moment', calendarDetails.date_start.value + ' ' + calendarDetails.time_start.value).format(),
				end: calendar.fullCalendar('moment', calendarDetails.due_date.value + ' ' + calendarDetails.time_end.value).format(),
				start_display: calendarDetails.date_start.display_value + ' ' + calendarDetails.time_start.display_value,
				end_display: calendarDetails.due_date.display_value + ' ' + calendarDetails.time_end.display_value,
				url: 'index.php?module=' + CONFIG.module + '&view=Detail&record=' + calendarDetails._recordId,
				className: 'js-popover-tooltip--record ownerCBg_' + calendarDetails.assigned_user_id.value + ' picklistCBr_' + CONFIG.module + '_' + ($('.js-calendar__filter__select[data-cache="calendar-types"]').length ? this.eventTypeKeyName + '_' + calendarDetails[this.eventTypeKeyName]['value'] : ''),
				allDay: typeof calendarDetails.allday === 'undefined' ? false : calendarDetails.allday.value == 'on'
			};
			return eventObject;
		}
	}, {
		key: 'isNewEventToDisplay',
		value: function isNewEventToDisplay(eventObject) {
			var ownerSelects = $('.js-calendar__filter__select[data-cache="calendar-users"]').add($('.js-calendar__filter__select[data-cache="calendar-groups"]'));
			if ($.inArray(eventObject.assigned_user_id.value, ownerSelects.val()) < 0) {
				this.refreshFilterValues(eventObject, ownerSelects);
				return false;
			}
			var calendarTypes = $('.js-calendar__filter__select[data-cache="calendar-types"]');
			if (calendarTypes.length) {
				if (!this.eventTypeKeyName) {
					this.setEventTypeKey(eventObject);
				}
				if ($.inArray(eventObject[this.eventTypeKeyName]['value'], calendarTypes.val()) < 0) {
					return false;
				}
			}
			return true;
		}
	}, {
		key: 'setEventTypeKey',
		value: function setEventTypeKey(eventObject) {
			var self = this;
			Object.keys(eventObject).forEach(function (key, index) {
				if (key.endsWith('type')) {
					// there are different names for event types in modules
					self.eventTypeKeyName = key;
				}
			});
		}
	}, {
		key: 'refreshFilterValues',
		value: function refreshFilterValues(eventObject, filtersValues) {
			var _this4 = this;

			if (CONFIG.searchShowOwnerOnlyInList) {
				var allOptions = [];
				filtersValues.find('option').each(function (i, option) {
					allOptions.push($(option).val());
				});
				if ($.inArray(eventObject.assigned_user_id.value, allOptions) < 0) {
					AppConnector.request('module=' + CONFIG.module + '&view=RightPanel&mode=getUsersList').done(function (usersData) {
						var filterUsers = $('.js-calendar__filter--users');
						var filterGroups = $('.js-calendar__filter--groups');
						filterUsers.html(usersData);
						if (usersData) {
							filterUsers.closest('.js-toggle-panel').removeClass('d-none');
						}
						if (filterGroups.length) {
							AppConnector.request('module=' + CONFIG.module + '&view=RightPanel&mode=getGroupsList').done(function (groupsData) {
								filterGroups.html(groupsData);
								if (groupsData) {
									filterGroups.closest('.js-toggle-panel').removeClass('d-none');
								}
								_this4.registerSelect2Event();
							});
						} else {
							_this4.registerSelect2Event();
						}
					});
				}
			}
		}

		/**
   * Add calendar event.
   */

	}, {
		key: 'addCalendarEvent',
		value: function addCalendarEvent(eventObject) {
			if (this.isNewEventToDisplay(eventObject)) {
				this.getCalendarView().fullCalendar('renderEvent', this.getEventRenderData(eventObject));
			}
		}

		/**
   * Get calendar container.
   * @returns {(boolean|jQuery)}
   */

	}, {
		key: 'getCalendarView',
		value: function getCalendarView() {
			if (this.calendarView == false) {
				this.calendarView = this.container.find('.js-calendar__container');
			}
			return this.calendarView;
		}
	}]);
	return _class;
}();

/**
 *  Class representing a calendar with creating events by day click instead of selecting days.
 * @extends Calendar_Js
 */
window.Calendar_Unselectable_Js = function (_Calendar_Js) {
	inherits(_class2, _Calendar_Js);

	function _class2() {
		classCallCheck(this, _class2);
		return possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
	}

	createClass(_class2, [{
		key: 'setCalendarModuleOptions',

		/**
   * Set calendar module options.
   * @returns {{allDaySlot: boolean, dayClick: object, selectable: boolean}}
   */
		value: function setCalendarModuleOptions() {
			var self = this;
			return {
				allDaySlot: false,
				dayClick: this.eventCreate ? function (date) {
					self.registerDayClickEvent(date.format());
					self.getCalendarView().fullCalendar('unselect');
				} : false,
				selectable: false
			};
		}

		/**
   * Register day click event.
   * @param {string} date
   */

	}, {
		key: 'registerDayClickEvent',
		value: function registerDayClickEvent(date) {
			var self = this;
			self.getCalendarCreateView().done(function (data) {
				if (data.length <= 0) {
					return;
				}
				var dateFormat = data.find('[name="date_start"]').data('dateFormat').toUpperCase(),
				    timeFormat = data.find('[name="time_start"]').data('format'),
				    defaultTimeFormat = 'hh:mm A';
				if (timeFormat == 24) {
					defaultTimeFormat = 'HH:mm';
				}
				var startDateInstance = Date.parse(date);
				var startDateString = moment(date).format(dateFormat);
				var startTimeString = moment(date).format(defaultTimeFormat);
				var endDateInstance = Date.parse(date);
				var endDateString = moment(date).format(dateFormat);

				var view = self.getCalendarView().fullCalendar('getView');
				var endTimeString = void 0;
				if ('month' == view.name) {
					var diffDays = parseInt((endDateInstance - startDateInstance) / (1000 * 60 * 60 * 24));
					if (diffDays > 1) {
						var defaultFirstHour = app.getMainParams('startHour');
						var explodedTime = defaultFirstHour.split(':');
						startTimeString = explodedTime['0'];
						var defaultLastHour = app.getMainParams('endHour');
						explodedTime = defaultLastHour.split(':');
						endTimeString = explodedTime['0'];
					} else {
						var now = new Date();
						startTimeString = moment(now).format(defaultTimeFormat);
						endTimeString = moment(now).add(15, 'minutes').format(defaultTimeFormat);
					}
				} else {
					endTimeString = moment(endDateInstance).add(30, 'minutes').format(defaultTimeFormat);
				}
				data.find('[name="date_start"]').val(startDateString);
				data.find('[name="due_date"]').val(endDateString);
				data.find('[name="time_start"]').val(startTimeString);
				data.find('[name="time_end"]').val(endTimeString);

				var headerInstance = new Vtiger_Header_Js();
				headerInstance.handleQuickCreateData(data, {
					callbackFunction: function callbackFunction(data) {
						self.addCalendarEvent(data.result, dateFormat);
					}
				});
			});
		}
	}]);
	return _class2;
}(Calendar_Js);
//# sourceMappingURL=Calendar.min.js.map
