'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

var MultiImage = function () {
	/**
  * Create class instance
  *
  * @param {HTMLElement|jQuery} inputElement - input type file element inside component
  */
	function MultiImage(element) {
		classCallCheck(this, MultiImage);

		var thisInstance = this;
		this.elements = {};
		this.options = {
			zoomTitleAnimation: {
				in: 'fadeIn',
				out: 'fadeOut'
			},
			showCarousel: true
		};
		this.detailView = false;
		this.elements.fileInput = element.find('.js-multi-image__file').eq(0);
		if (this.elements.fileInput.length === 0) {
			this.detailView = true;
		}
		this.elements.component = element.eq(0);
		this.elements.form = element.closest('form').eq(0);
		$(this.elements.form).on('submit', this.onFormSubmit);
		this.elements.addButton = this.elements.component.find('.js-multi-image__file-btn').eq(0);
		this.elements.values = this.elements.component.find('.js-multi-image__values').eq(0);
		this.elements.progressBar = this.elements.component.find('.js-multi-image__progress-bar').eq(0);
		this.elements.progress = this.elements.component.find('.js-multi-image__progress').eq(0);
		this.elements.result = this.elements.component.find('.js-multi-image__result').eq(0);
		this.fieldInfo = this.elements.values.data('fieldinfo');
		this.options.formats = this.fieldInfo.formats;
		this.options.limit = this.fieldInfo.limit;
		if (!this.detailView) {
			this.files = JSON.parse(this.elements.values.val());
		} else {
			this.files = this.elements.values.data('value');
		}
		if (!this.detailView) {
			this.elements.fileInput.detach();
			this.elements.addButton.click(this.addButtonClick.bind(this));
			this.elements.fileInput.fileupload({
				dataType: 'json',
				replaceFileInput: false,
				fileInput: this.fileInput,
				autoUpload: false,
				submit: this.submit.bind(this),
				add: this.add.bind(this),
				progressall: this.progressAll.bind(this),
				change: this.change.bind(this),
				drop: this.change.bind(this),
				dragover: this.dragOver.bind(this),
				fail: this.uploadError.bind(this),
				done: this.uploadSuccess.bind(this)
			});
			this.elements.component.on('dragleave', this.dragLeave.bind(this));
			this.elements.component.on('dragend', this.dragLeave.bind(this));
			this.elements.fileInput.fileupload('option', 'dropZone', $(this.elements.component));
			this.enableDragNDrop();
		}
		this.elements.component.on('click', '.js-multi-image__popover-img', function (e) {
			thisInstance.zoomPreview($(this).data('hash'));
		});
		this.elements.component.on('click', '.js-multi-image__popover-btn-zoom', function (e) {
			e.preventDefault();
			thisInstance.zoomPreview($(this).data('hash'));
		});
		this.elements.component.on('click', '.js-multi-image__popover-btn-download', function (e) {
			e.preventDefault();
			thisInstance.download($(this).data('hash'));
		});
		if (!this.detailView) {
			this.elements.component.on('click', '.js-multi-image__popover-btn-delete', function (e) {
				e.preventDefault();
				thisInstance.deleteFile($(this).data('hash'));
			});
		}
		this.loadExistingFiles();
		if (typeof $.fn.animateCss === 'undefined') {
			$.fn.extend({
				animateCss: function animateCss(animationName, callback) {
					var animationEnd = function (el) {
						var animations = {
							animation: 'animationend',
							OAnimation: 'oAnimationEnd',
							MozAnimation: 'mozAnimationEnd',
							WebkitAnimation: 'webkitAnimationEnd'
						};
						for (var t in animations) {
							if (el.style[t] !== undefined) {
								return animations[t];
							}
						}
					}(document.createElement('div'));
					this.addClass('animated ' + animationName).one(animationEnd, function () {
						$(this).removeClass('animated ' + animationName);

						if (typeof callback === 'function') callback();
					});
					return this;
				}
			});
		}
	}

	/**
  * Prevent form submission before file upload end
  * @param e
  */


	createClass(MultiImage, [{
		key: 'onFormSubmit',
		value: function onFormSubmit(e) {
			if (App.Fields.MultiImage.currentFileUploads) {
				e.preventDefault();
				e.stopPropagation();
				e.stopImmediatePropagation();
				bootbox.alert(app.vtranslate('JS_WAIT_FOR_FILE_UPLOAD'));
				return false;
			}
			return true;
		}

		/**
   * Prevent form submission
   *
   * @param {Event} e
   */

	}, {
		key: 'addButtonClick',
		value: function addButtonClick(e) {
			e.preventDefault();
			this.elements.fileInput.trigger('click');
		}

		/**
   * Submit event handler from jQuery-file-upload
   *
   * @param {Event} e
   * @param {Object} data
   */

	}, {
		key: 'submit',
		value: function submit(e, data) {
			data.formData = {
				hash: data.files[0].hash
			};
			App.Fields.MultiImage.currentFileUploads++;
		}

		/**
   * Get file information
   *
   * @param {String} hash - file id
   * @returns {Object}
   */

	}, {
		key: 'getFileInfo',
		value: function getFileInfo(hash) {
			for (var i = 0, len = this.files.length; i < len; i++) {
				var file = this.files[i];
				if (file.hash === hash) {
					return file;
				}
			}
			app.errorLog('File \'' + hash + '\' not found.');
			Vtiger_Helper_Js.showPnotify({ text: app.vtranslate('JS_INVALID_FILE_HASH') + (' [' + hash + ']') });
		}

		/**
   * Add property to file info object
   *
   * @param {String} hash - file id
   * @param {String} propertyName
   * @param {any} value
   * @returns {Object}
   */

	}, {
		key: 'addFileInfoProperty',
		value: function addFileInfoProperty(hash, propertyName, value) {
			var fileInfo = this.getFileInfo(hash);
			fileInfo[propertyName] = value;
			return fileInfo;
		}

		/**
   * Error event handler from file upload request
   *
   * @param {Event} e
   * @param {Object} data
   */

	}, {
		key: 'uploadError',
		value: function uploadError(e, data) {
			var _this = this;

			app.errorLog('File upload error.');
			var jqXHR = data.jqXHR,
			    files = data.files;

			if (typeof jqXHR.responseJSON === 'undefined' || jqXHR.responseJSON === null) {
				App.Fields.MultiImage.currentFileUploads--;
				return Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_FILE_UPLOAD_ERROR'));
			}
			var response = jqXHR.responseJSON;
			// first try to show error for concrete file
			if (typeof response.result !== 'undefined' && typeof response.result.attach !== 'undefined' && Array.isArray(response.result.attach)) {
				response.result.attach.forEach(function (fileAttach) {
					App.Fields.MultiImage.currentFileUploads--;
					_this.deleteFile(fileAttach.hash, false);
					if (typeof fileAttach.error === 'string') {
						Vtiger_Helper_Js.showPnotify(fileAttach.error + (' [' + fileAttach.name + ']'));
					} else {
						Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_FILE_UPLOAD_ERROR') + (' [' + fileAttach.name + ']'));
					}
				});
				this.updateFormValues();
				return;
			}
			// else show default upload error
			files.forEach(function (file) {
				App.Fields.MultiImage.currentFileUploads--;
				_this.deleteFile(file.hash, false);
				Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_FILE_UPLOAD_ERROR') + (' [' + file.name + ']'));
			});
			this.updateFormValues();
		}

		/**
   * Success event handler from file upload request
   *
   * @param {Event} e
   * @param {Object} data
   */

	}, {
		key: 'uploadSuccess',
		value: function uploadSuccess(e, data) {
			var _this2 = this;

			var result = data.result;

			var attach = result.result.attach;
			attach.forEach(function (fileAttach) {
				var hash = fileAttach.hash;
				if (!hash) {
					return app.errorLog(new Error(app.vtranslate('JS_INVALID_FILE_HASH') + (' [' + hash + ']')));
				}
				if (typeof fileAttach.key === 'undefined') {
					return _this2.uploadError(e, data);
				}
				if (typeof fileAttach.info !== 'undefined' && fileAttach.info) {
					Vtiger_Helper_Js.showPnotify({ type: 'notice', text: fileAttach.info + (' [' + fileAttach.name + ']') });
				}
				var fileInfo = _this2.getFileInfo(hash);
				_this2.addFileInfoProperty(hash, 'key', fileAttach.key);
				_this2.addFileInfoProperty(hash, 'size', fileAttach.size);
				_this2.addFileInfoProperty(hash, 'name', fileAttach.name);
				_this2.removePreviewPopover(hash);
				_this2.addPreviewPopover(fileInfo.file, fileInfo.previewElement, fileInfo.imageSrc);
				App.Fields.MultiImage.currentFileUploads--;
			});
			this.updateFormValues();
		}

		/**
   * Update form input values
   */

	}, {
		key: 'updateFormValues',
		value: function updateFormValues() {
			this.elements.fileInput.val(null);
			var formValues = this.files.map(function (file) {
				return { key: file.key, name: file.name, size: file.size };
			});
			this.elements.values.val(JSON.stringify(formValues));
		}

		/**
   * Validate file
   *
   * @param {Object} file
   * @returns {boolean}
   */

	}, {
		key: 'validateFile',
		value: function validateFile(file) {
			var valid = false;
			this.options.formats.forEach(function (format) {
				if (file.type === 'image/' + format) {
					valid = true;
				}
			});
			if (!valid) {
				Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_INVALID_FILE_TYPE') + ' [' + file.name + ']\n' + app.vtranslate('JS_AVAILABLE_FILE_TYPES') + '  [' + this.options.formats.join(', ') + ']');
			}
			return valid;
		}

		/**
   * Show limit error
   */

	}, {
		key: 'showLimitError',
		value: function showLimitError() {
			this.elements.fileInput.val('');
			Vtiger_Helper_Js.showPnotify(app.vtranslate('JS_FILE_LIMIT') + ' [' + this.options.limit + ']');
		}

		/**
   * Get only valid files from list
   *
   * @param {Array} files
   * @returns {Array}
   */

	}, {
		key: 'filterValidFiles',
		value: function filterValidFiles(files) {
			var _this3 = this;

			if (files.length + this.files.length > this.options.limit) {
				this.showLimitError();
				return [];
			}
			return files.filter(function (file) {
				return _this3.validateFile(file);
			});
		}

		/**
   * Set files hash
   * @param {Array} files
   * @returns {Array}
   */

	}, {
		key: 'setFilesHash',
		value: function setFilesHash(files) {
			var addedFiles = [];
			for (var i = 0, len = files.length; i < len; i++) {
				var file = files[i];
				if (typeof file.hash === 'undefined') {
					if (this.files.length < this.options.limit) {
						file.hash = App.Fields.Text.generateRandomHash(CONFIG.userId);
						this.files.push({ hash: file.hash, imageSrc: file.imageSrc, name: file.name, file: file });
						addedFiles.push(file);
					} else {
						this.showLimitError();
						return addedFiles;
					}
				}
			}
			return addedFiles;
		}

		/**
   * Add event handler from jQuery-file-upload
   *
   * @param {Event} e
   * @param {object} data
   */

	}, {
		key: 'add',
		value: function add(e, data) {
			if (data.files.length > 0) {
				data.submit();
			}
		}

		/**
   * Progressall event handler from jQuery-file-upload
   *
   * @param {Event} e
   * @param {Object} data
   */

	}, {
		key: 'progressAll',
		value: function progressAll(e, data) {
			var _this4 = this;

			var progress = parseInt(data.loaded / data.total * 100, 10);
			this.elements.progressBar.css({ width: progress + '%' });
			if (progress === 100) {
				setTimeout(function () {
					_this4.elements.progress.addClass('d-none');
					_this4.elements.progressBar.css({ width: '0%' });
				}, 1000);
			} else {
				this.elements.progress.removeClass('d-none');
			}
		}

		/**
   * Dragover event handler from jQuery-file-upload
   *
   * @param {Event} e
   */

	}, {
		key: 'dragOver',
		value: function dragOver(e) {
			this.elements.component.addClass('c-multi-image__drop-effect');
		}

		/**
   * Dragleave event handler
   * @param {Event} e
   */

	}, {
		key: 'dragLeave',
		value: function dragLeave(e) {
			this.elements.component.removeClass('c-multi-image__drop-effect');
		}

		/**
   * Download file according to source type (base64/file from server)
   *
   * @param {String} hash
   */

	}, {
		key: 'download',
		value: function download(hash) {
			var fileInfo = this.getFileInfo(hash);
			if (fileInfo.imageSrc.substr(0, 8).toLowerCase() === 'file.php') {
				return this.downloadFile(hash);
			} else {
				return this.downloadBase64(hash);
			}
		}

		/**
   * Download file that exists on the server already
   * @param {String} hash
   */

	}, {
		key: 'downloadFile',
		value: function downloadFile(hash) {
			var fileInfo = this.getFileInfo(hash);
			var link = document.createElement('a');
			$(link).css('display', 'none');
			if (typeof link.download === 'string') {
				document.body.appendChild(link); // Firefox requires the link to be in the body
				link.download = fileInfo.name;
				link.href = fileInfo.imageSrc;
				link.click();
				document.body.removeChild(link); // remove the link when done
			} else {
				location.replace(fileInfo.imageSrc);
			}
		}

		/**
   * Download file from base64 image
   *
   * @param {String} hash
   */

	}, {
		key: 'downloadBase64',
		value: function downloadBase64(hash) {
			var fileInfo = this.getFileInfo(hash);
			var imageUrl = 'data:application/octet-stream;filename=' + fileInfo.name + ';base64,' + fileInfo.imageSrc.split(',')[1];
			var link = document.createElement('a');
			$(link).css('display', 'none');
			if (typeof link.download === 'string') {
				document.body.appendChild(link); // Firefox requires the link to be in the body
				link.download = fileInfo.name;
				link.href = imageUrl;
				link.click();
				document.body.removeChild(link); // remove the link when done
			} else {
				location.replace(imageUrl);
			}
		}

		/**
   * Display modal window with large preview
   *
   * @param {string} hash
   */

	}, {
		key: 'zoomPreview',
		value: function zoomPreview(hash) {
			var _this5 = this;

			var thisInstance = this;
			var fileInfo = this.getFileInfo(hash);
			var titleTemplate = function titleTemplate() {
				return '<i class="fa fa-image"></i> ' + fileInfo.name;
			};
			var bootboxOptions = {
				size: 'large',
				backdrop: true,
				onEscape: true,
				title: '<span id="bootbox-title-' + hash + '" class="animated ' + this.options.zoomTitleAnimation.in + '">' + titleTemplate() + '</span>',
				message: '<img src="' + fileInfo.imageSrc + '" class="w-100" />',
				buttons: {}
			};
			if (this.options.showCarousel) {
				bootboxOptions.message = this.generateCarousel(hash);
			}
			if (!this.detailView) {
				bootboxOptions.buttons.Delete = {
					label: '<i class="fa fa-trash-alt"></i> ' + app.vtranslate('JS_DELETE'),
					className: 'float-left btn btn-danger',
					callback: function callback() {
						thisInstance.deleteFile(fileInfo.hash);
					}
				};
			}
			bootboxOptions.buttons.Download = {
				label: '<i class="fa fa-download"></i> ' + app.vtranslate('JS_DOWNLOAD'),
				className: 'float-left btn btn-success',
				callback: function callback() {
					thisInstance.download(fileInfo.hash);
				}
			};
			bootboxOptions.buttons.Close = {
				label: '<i class="fa fa-times"></i> ' + app.vtranslate('JS_CLOSE'),
				className: 'btn btn-warning',
				callback: function callback() {}
			};
			bootbox.dialog(bootboxOptions);
			if (this.options.showCarousel) {
				$('#bootbox-title-' + hash).css({
					'animation-duration': '350ms'
				});
				$('#carousel-' + hash).on('slide.bs.carousel', function (e) {
					fileInfo = _this5.getFileInfo($(e.relatedTarget).data('hash'));
					var aniIn = _this5.options.zoomTitleAnimation.in;
					var aniOut = _this5.options.zoomTitleAnimation.out;
					$('#bootbox-title-' + hash).animateCss(aniOut, function () {
						$('#bootbox-title-' + hash).html(titleTemplate()).removeClass('animated ' + aniOut).animateCss(aniIn);
					});
				});
			}
		}

		/**
   * Remove file from preview and from file list
   *
   * @param {String} hash
   */

	}, {
		key: 'deleteFileCallback',
		value: function deleteFileCallback(hash) {
			var fileInfo = this.getFileInfo(hash);
			fileInfo.previewElement.popover('dispose').remove();
			this.files = this.files.filter(function (file) {
				return file.hash !== fileInfo.hash;
			});
			this.updateFormValues();
		}

		/**
   * Delete image from input field
   * Should be called with this pointing on button element with data-hash attribute
   *
   * @param {string} hash
   * @param {boolean} showConfirmation - dialog?
   */

	}, {
		key: 'deleteFile',
		value: function deleteFile(hash) {
			var _this6 = this;

			var showConfirmation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

			if (showConfirmation) {
				var fileInfo = this.getFileInfo(hash);
				bootbox.confirm({
					title: '<i class="fa fa-trash-alt"></i> ' + app.vtranslate('JS_DELETE_FILE'),
					message: app.vtranslate('JS_DELETE_FILE_CONFIRMATION') + ' <span class="font-weight-bold">' + fileInfo.name + '</span>?',
					callback: function callback(result) {
						if (result) {
							_this6.deleteFileCallback(hash);
						}
					}
				});
			} else {
				this.deleteFileCallback(hash);
			}
		}

		/**
   * File change event handler from jQuery-file-upload
   *
   * @param {Event} e
   * @param {object} data
   */

	}, {
		key: 'change',
		value: function change(e, data) {
			var _this7 = this;

			data.files = this.filterValidFiles(data.files);
			data.files = this.setFilesHash(data.files);
			this.dragLeave(e);
			if (data.files.length) {
				this.generatePreviewElements(data.files, function (element) {
					_this7.redraw();
				});
			}
		}

		/**
   * Generate and apply popover to preview
   *
   * @param {File} file
   * @param {string} template
   * @param {string} imageSrc
   * @returns {jQuery}
   */

	}, {
		key: 'addPreviewPopover',
		value: function addPreviewPopover(file, template, imageSrc) {
			var thisInstance = this;
			var fileSize = '';
			var fileInfo = this.getFileInfo(file.hash);
			if (typeof fileInfo.size !== 'undefined') {
				fileSize = '<div class="p-1 bg-white border rounded small position-absolute">' + fileInfo.size + '</div>';
			}
			var deleteBtn = '';
			if (!this.detailView) {
				deleteBtn = '<button class="btn btn-sm btn-danger c-btn-collapsible js-multi-image__popover-btn-delete" type="button" data-hash="' + file.hash + '" data-js="click"><i class="fa fa-trash-alt"></i> <span class="c-btn-collapsible__text">' + app.vtranslate('JS_DELETE') + '</span></button>';
			}
			return $(template).popover({
				container: thisInstance.elements.component,
				title: '<div class="u-text-ellipsis"><i class="fa fa-image"></i> ' + file.name + '</div>',
				html: true,
				sanitize: false,
				trigger: 'focus',
				placement: 'top',
				content: '<img src="' + imageSrc + '" class="w-100 js-multi-image__popover-img c-multi-image__popover-img" data-hash="' + file.hash + '" data-js="click"/>',
				template: '<div class="popover" role="tooltip">\n\t\t\t\t<div class="arrow"></div>\n\t\t\t\t<h3 class="popover-header"></h3>\n\t\t\t\t<div class="popover-body"></div>\n\t\t\t\t<div class="text-right popover-footer js-multi-image__popover-actions">\n\t\t\t\t\t' + fileSize + '\n\t\t\t\t\t' + deleteBtn + '\n\t\t\t\t\t<button class="btn btn-sm btn-success c-btn-collapsible js-multi-image__popover-btn-download" type="button" data-hash="' + file.hash + '" data-js="click"><i class="fa fa-download"></i> <span class="c-btn-collapsible__text">' + app.vtranslate('JS_DOWNLOAD') + '</span></button>\n\t\t\t\t\t<button class="btn btn-sm btn-primary c-btn-collapsible js-multi-image__popover-btn-zoom" type="button" data-hash="' + file.hash + '" data-js="click"><i class="fa fa-search-plus"></i> <span class="c-btn-collapsible__text">' + app.vtranslate('JS_ZOOM_IN') + '</span></button>\n\t\t\t\t</div>\n\t\t\t</div>'
			});
		}

		/**
   * Remove preview popover
   *
   * @param {String} hash
   */

	}, {
		key: 'removePreviewPopover',
		value: function removePreviewPopover(hash) {
			var fileInfo = this.getFileInfo(hash);
			if (typeof fileInfo.previewElement !== 'undefined') {
				fileInfo.previewElement.popover('dispose');
			}
		}

		/**
   * Hide popovers when user starts moving file preview
   *
   * @param {Event} e
   * @param {Object} ui
   */

	}, {
		key: 'sortOver',
		value: function sortOver(e, ui) {
			this.elements.result.find('.js-multi-image__preview').popover('hide');
		}

		/**
   * Update file position according to elements order
   *
   * @param {Event} e
   * @param {Object} ui
   */

	}, {
		key: 'sortStop',
		value: function sortStop(e, ui) {
			var _this8 = this;

			var actualElements = this.elements.result.find('.js-multi-image__preview').toArray();
			this.files = actualElements.map(function (element) {
				for (var i = 0, len = _this8.files.length; i < len; i++) {
					var elementHash = $(element).data('hash');
					if (_this8.files[i].hash === elementHash) {
						return _this8.files[i];
					}
				}
			});
			this.redraw();
		}

		/**
   * Redraw view according to in-memory positions
   */

	}, {
		key: 'redraw',
		value: function redraw() {
			var _this9 = this;

			this.files.forEach(function (file) {
				_this9.elements.result.append(file.previewElement);
			});
			this.updateFormValues();
		}

		/**
   * Enable drag and drop files repositioning
   */

	}, {
		key: 'enableDragNDrop',
		value: function enableDragNDrop() {
			this.elements.result.sortable({
				handle: '.js-multi-image__preview-img',
				items: '.js-multi-image__preview',
				over: this.sortOver.bind(this),
				stop: this.sortStop.bind(this)
			}).disableSelection().on('mousedown', '.js-multi-image__preview-img', function (e) {
				this.focus(); // focus to show popover
			});
		}

		/**
   * Generate preview of images and append to multi image results view
   *
   * @param {Array} files - array of Files
   * @param {function} callback
   */

	}, {
		key: 'generatePreviewElements',
		value: function generatePreviewElements(files, callback) {
			var _this10 = this;

			files.forEach(function (file) {
				if (file instanceof File) {
					_this10.generatePreviewFromFile(file, function (template, imageSrc) {
						file.preview = _this10.addPreviewPopover(file, template, imageSrc);
						_this10.addFileInfoProperty(file.hash, 'previewElement', file.preview);
						callback(file.preview);
					});
				} else {
					_this10.generatePreviewFromValue(file, function (template, imageSrc) {
						file.preview = _this10.addPreviewPopover(file, template, imageSrc);
						_this10.addFileInfoProperty(file.hash, 'previewElement', file.preview);
						callback(file.preview);
					});
				}
			});
		}

		/**
   * Generate preview of image as html string
   *
   * @param {File} file
   * @param {function} callback
   */

	}, {
		key: 'generatePreviewFromFile',
		value: function generatePreviewFromFile(file, callback) {
			var _this11 = this;

			var fr = new FileReader();
			fr.onload = function () {
				file.imageSrc = fr.result;
				_this11.addFileInfoProperty(file.hash, 'imageSrc', file.imageSrc);
				callback('<div class="d-inline-block mr-1 js-multi-image__preview" id="js-multi-image__preview-hash-' + file.hash + '" data-hash="' + file.hash + '" data-js="container|click">\n\t\t\t\t\t<div class="img-thumbnail js-multi-image__preview-img c-multi-image__preview-img" data-hash="' + file.hash + '" data-js="drag" style="background-image:url(' + fr.result + ')" tabindex="0" title="' + file.name + '"></div>\n\t\t\t</div>', fr.result);
			};
			fr.readAsDataURL(file);
		}

		/**
   * Generate preview of image as html string from existing values
   *
   * @param {File} file
   * @param {function} callback
   */

	}, {
		key: 'generatePreviewFromValue',
		value: function generatePreviewFromValue(file, callback) {
			callback('<div class="d-inline-block mr-1 js-multi-image__preview" id="js-multi-image__preview-hash-' + file.hash + '" data-hash="' + file.hash + '" data-js="container|click">\n\t\t\t\t<div class="img-thumbnail js-multi-image__preview-img c-multi-image__preview-img" data-hash="' + file.hash + '" data-js="drag" style="background-image:url(' + file.imageSrc + ')" tabindex="0" title="' + file.name + '"></div>\n\t\t</div>', file.imageSrc);
		}

		/**
   * Load files that were in valueInput as json string
   */

	}, {
		key: 'loadExistingFiles',
		value: function loadExistingFiles() {
			var _this12 = this;

			this.files = this.files.map(function (file) {
				file.hash = App.Fields.Text.generateRandomHash(CONFIG.userId);
				return file;
			}).slice(0, this.options.limit);
			this.generatePreviewElements(this.files, function (element) {
				_this12.elements.result.append(element);
			});
			this.updateFormValues();
		}

		/**
   * Generate carousel for all files in large preview
   *
   * @param {String} hash
   */

	}, {
		key: 'generateCarousel',
		value: function generateCarousel(hash) {
			if (this.files.length <= 1) {
				var fileInfo = this.getFileInfo(hash);
				return '<img class="d-block w-100" src="' + fileInfo.imageSrc + '">';
			}
			var template = '<div id="carousel-' + hash + '" class="carousel slide c-carousel" data-ride="carousel" data-js="container">\n\t\t  <div class="carousel-inner">';
			this.files.forEach(function (file) {
				template += '<div class="carousel-item c-carousel__item';
				if (file.hash === hash) {
					template += ' active';
				}
				template += '" data-hash="' + file.hash + '">\n\t\t      <img class="d-block w-100 c-carousel__image" src="' + file.imageSrc + '">\n\t\t    </div>';
			});
			template += '<a class="carousel-control-prev c-carousel__prevnext-btn c-carousel__prev-btn" href="#carousel-' + hash + '" role="button" data-slide="prev" data-js="click">\n\t\t    <span class="fas fa-caret-left fa-2x c-carousel__prev-icon mr-1" aria-hidden="true"></span>\n\t\t  </a>\n\t\t  <a class="carousel-control-next c-carousel__prevnext-btn c-carousel__next-btn" href="#carousel-' + hash + '" role="button" data-slide="next" data-js="click">\n\t\t    <span class="fas fa-caret-right fa-2x c-carousel__next-icon ml-1" aria-hidden="true"></span>\n\t\t  </a>\n\t\t</div>';
			return template;
		}
	}]);
	return MultiImage;
}();
//# sourceMappingURL=MultiImage.min.js.map
