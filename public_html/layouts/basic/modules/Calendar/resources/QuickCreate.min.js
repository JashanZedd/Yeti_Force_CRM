'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

/**
 *  Class representing a modal calendar.
 * @extends Calendar_CalendarExtended_Js
 */

window.Calendar_CalendarModal_Js = function (_Calendar_CalendarExt) {
	inherits(_class, _Calendar_CalendarExt);

	function _class(container, readonly) {
		classCallCheck(this, _class);

		var _this = possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, container, readonly));

		_this.isSwitchAllDays = false;
		_this.sidebarName = 'add'; //available: add, status, edit
		_this.eventCreate = true;
		_this.module = 'Calendar';
		_this.renderCalendar();
		_this.registerEvents();
		return _this;
	}

	/**
  * Function sets calendar moduls's options
  * Overwrites Calendar_Calendar_Js
  */


	createClass(_class, [{
		key: 'setCalendarModuleOptions',
		value: function setCalendarModuleOptions() {
			return { hiddenDays: app.getMainParams('hiddenDays', true) };
		}

		/**
   * Function registers calendar events
   * Overwrites Calendar_CalendarExtended_Js
   */

	}, {
		key: 'registerEvents',
		value: function registerEvents() {
			this.registerSwitchEvents();
			this.registerUsersChange();
			this.registerAutofillTime();
			this.registerPopoverButtonsClickEvent();
		}

		/**
   * Function registers calendar switch event
   * Overwrites Calendar_CalendarExtended_Js
   */

	}, {
		key: 'registerSwitchEvents',
		value: function registerSwitchEvents() {
			var _this2 = this;

			if (app.getMainParams('hiddenDays', true) !== false) {
				var calendarview = this.getCalendarView(),
				    switchContainer = $('<div class="js-calendar-switch-container"></div>').insertAfter(calendarview.find('.fc-center'));
				$(this.switchTpl(app.vtranslate('JS_WORK_DAYS'), app.vtranslate('JS_ALL'), this.isSwitchAllDays)).prependTo(switchContainer).on('change', 'input', function (e) {
					var currentTarget = $(e.currentTarget);
					var hiddenDays = [];
					if (typeof currentTarget.data('on-text') !== 'undefined') {
						hiddenDays = app.getMainParams('hiddenDays', true);
						_this2.isSwitchAllDays = false;
					} else {
						_this2.isSwitchAllDays = true;
					}
					_this2.getCalendarView().fullCalendar('option', 'hiddenDays', hiddenDays);
					if (_this2.getCalendarView().fullCalendar('getView').type === 'year') {
						_this2.registerViewRenderEvents(_this2.getCalendarView().fullCalendar('getView'));
					}
					_this2.registerSwitchEvents();
				});
			}
		}

		/**
   * Function registers select's user change event
   * Overwrites Calendar_CalendarExtended_Js
   */

	}, {
		key: 'registerUsersChange',
		value: function registerUsersChange() {
			var _this3 = this;

			this.container.find('.assigned_user_id').on('change', function () {
				_this3.getCalendarView().fullCalendar('getCalendar').view.options.loadView();
			});
		}

		/**
   * Function return user's id
   * Overwrites Calendar_CalendarExtended_Js
   * @returns {int}
   */

	}, {
		key: 'getSelectedUsersCalendar',
		value: function getSelectedUsersCalendar() {
			return this.container.find('.assigned_user_id').val();
		}

		/**
   * Function invokes by fullcalendar, sets selected days in form
   * Overwrites Calendar_CalendarExtended_Js
   * @param startDate
   * @param endDate
   */

	}, {
		key: 'selectDays',
		value: function selectDays(startDate, endDate) {
			var _this4 = this;

			if (this.sidebarName === 'status') {
				this.sidebarName = 'add';
				this.getCalendarCreateView().done(function () {
					_this4.selectDays(startDate, endDate);
				});
				return;
			}
			var startHour = app.getMainParams('startHour'),
			    endHour = app.getMainParams('endHour'),
			    view = this.getCalendarView().fullCalendar('getView');
			if (endDate.hasTime() == false) {
				endDate.add(-1, 'days');
			}
			startDate = startDate.format();
			endDate = endDate.format();
			if (startHour == '') {
				startHour = '00';
			}
			if (endHour == '') {
				endHour = '00';
			}
			if (view.name != 'agendaDay' && view.name != 'agendaWeek') {
				startDate = startDate + 'T' + startHour + ':00';
				endDate = endDate + 'T' + endHour + ':00';
				if (startDate == endDate) {
					var activityType = this.container.find('[name="activitytype"]').val();
					var activityDurations = JSON.parse(this.container.find('[name="defaultOtherEventDuration"]').val());
					var minutes = 0;
					for (var i in activityDurations) {
						if (activityDurations[i].activitytype === activityType) {
							minutes = parseInt(activityDurations[i].duration);
							break;
						}
					}
					endDate = moment(endDate).add(minutes, 'minutes').toISOString();
				}
			}
			var dateFormat = this.container.find('[name="date_start"]').data('dateFormat').toUpperCase(),
			    timeFormat = this.container.find('[name="time_start"]').data('format'),
			    defaultTimeFormat = '';
			if (timeFormat == 24) {
				defaultTimeFormat = 'HH:mm';
			} else {
				defaultTimeFormat = 'hh:mm A';
			}
			this.container.find('[name="date_start"]').val(moment(startDate).format(dateFormat));
			this.container.find('[name="due_date"]').val(moment(endDate).format(dateFormat));
			if (this.container.find('.js-autofill').prop('checked') === true) {
				var calendarEditInstance = new Calendar_Edit_Js();
				calendarEditInstance.getFreeTime(this.container);
			} else {
				this.container.find('[name="time_start"]').val(moment(startDate).format(defaultTimeFormat));
				this.container.find('[name="time_end"]').val(moment(endDate).format(defaultTimeFormat));
			}
		}

		/** @inheritdoc */

	}, {
		key: 'registerEditForm',
		value: function registerEditForm(sideBar) {
			var _this5 = this;

			var editViewInstance = Vtiger_Edit_Js.getInstanceByModuleName(sideBar.find('[name="module"]').val()),
			    headerInstance = new Vtiger_Header_Js(),
			    params = [];
			var rightFormCreate = sideBar.find('form[name="QuickCreate"]');
			editViewInstance.registerBasicEvents(rightFormCreate);
			rightFormCreate.validationEngine(app.validationEngineOptions);
			headerInstance.registerHelpInfo(rightFormCreate);
			App.Fields.Picklist.showSelect2ElementView(sideBar.find('select'));
			sideBar.find('.js-summary-close-edit').on('click', function () {
				_this5.getCalendarCreateView();
			});
			headerInstance.registerQuickCreatePostLoadEvents(rightFormCreate, params);
			new App.Fields.Text.Editor(sideBar.find('.js-editor'), { height: '5em', toolbar: 'Min' });
		}

		/** @inheritdoc */

	}, {
		key: 'updateSidebar',
		value: function updateSidebar(sidebar, data) {
			var modalTitleContainer = $('.js-modal-title__container'),
			    modalTitles = modalTitleContainer.find('[class*="js-modal-title"]');
			data = $(data);

			modalTitles.addClass('d-none');
			if (data.hasClass('js-edit-form')) {
				var title = data.find('.js-sidebar-title ').data('title');
				modalTitles.filter('.js-modal-title--' + title).removeClass('d-none');
				this.sidebarName = title;
			} else if (data.hasClass('js-activity-state')) {
				modalTitles.filter('.js-modal-title--status').removeClass('d-none');
				this.sidebarName = 'status';
			}
			sidebar.find('.js-qc-form').html(data);
		}
	}]);
	return _class;
}(Calendar_CalendarExtended_Js);

jQuery.Class("Calendar_QuickCreate_Js", {}, {
	container: false,
	getContainer: function getContainer() {
		return this.container;
	},

	setContainer: function setContainer(container) {
		this.container = container;
	},
	registerExtendCalendar: function registerExtendCalendar() {
		new Calendar_CalendarModal_Js($('.js-modal-container'), true);
		var container = this.getContainer();
		container.find('.js-activity-buttons button').on('click', function (e) {
			var form = container.find('form');
			var currentTarget = $(e.currentTarget);
			if (1 === currentTarget.data('type')) {
				form.append('<input type=hidden name="activitystatus" value="' + currentTarget.data('state') + '">');
				form.submit();
			} else {
				container.find('.js-activity-buttons').remove();
				form.find('[name="record"]').val('');
				form.append('<input type=hidden name="postponed" value="true">');
				form.append('<input type=hidden name="followup" value="' + currentTarget.data('id') + '">');
			}
		});
	},
	registerStandardCalendar: function registerStandardCalendar() {
		var thisInstance = this;
		var container = this.getContainer();
		var data = container.find('form');
		var user = data.find('[name="assigned_user_id"]');
		var dateStartEl = data.find('[name="date_start"]');
		var dateEnd = data.find('[name="due_date"]');
		user.on('change', function (e) {
			var element = $(e.currentTarget);
			var data = element.closest('form');
			thisInstance.getNearCalendarEvent(data);
		});
		dateStartEl.on('change', function (e) {
			var element = $(e.currentTarget);
			var data = element.closest('form');
			thisInstance.getNearCalendarEvent(data);
		});
		data.find('ul li a').on('click', function (e) {
			var element = $(e.currentTarget);
			var data = element.closest('form');
			data.find('.addedNearCalendarEvent').remove();
			thisInstance.getNearCalendarEvent(data);
		});
		data.on('click', '.nextDayBtn', function () {
			var dateStartEl = data.find('[name="date_start"]');
			var startDay = dateStartEl.val();
			var dateStartFormat = dateStartEl.data('date-format');
			startDay = moment(Vtiger_Helper_Js.convertToDateString(startDay, dateStartFormat, '+7', ' ')).format(dateStartFormat.toUpperCase());
			dateStartEl.val(startDay);
			dateEnd.val(startDay);
			thisInstance.getNearCalendarEvent(data);
		});
		data.on('click', '.previousDayBtn', function () {
			var dateStartEl = data.find('[name="date_start"]');
			var startDay = dateStartEl.val();
			var dateStartFormat = dateStartEl.data('date-format');
			startDay = moment(Vtiger_Helper_Js.convertToDateString(startDay, dateStartFormat, '-7', ' ')).format(dateStartFormat.toUpperCase());
			dateStartEl.val(startDay);
			dateEnd.val(startDay);
			thisInstance.getNearCalendarEvent(data);
		});
		data.on('click', '.dateBtn', function (e) {
			var element = $(e.currentTarget);
			dateStartEl.val(element.data('date'));
			data.find('[name="due_date"]').val(element.data('date'));
			data.find('[name="date_start"]').trigger('change');
		});
		thisInstance.getNearCalendarEvent(data);
	},
	getNearCalendarEvent: function getNearCalendarEvent(container) {
		var dateStartVal = container.find('[name="date_start"]').val();
		if (typeof dateStartVal === "undefined" || dateStartVal === '') {
			return;
		}
		var params = {
			module: 'Calendar',
			view: 'QuickCreateEvents',
			currentDate: dateStartVal,
			user: container.find('[name="assigned_user_id"]').val()
		};
		var progressIndicatorElement = $.progressIndicator({
			position: 'html',
			blockInfo: {
				enabled: true,
				elementToBlock: container.find('.eventsTable')
			}
		});
		AppConnector.request(params).done(function (events) {
			progressIndicatorElement.progressIndicator({ 'mode': 'hide' });
			container.find('.eventsTable').remove();
			container.append(events);
			Vtiger_Header_Js.getInstance().registerHelpInfo(container);
		});
	},
	registerEvents: function registerEvents(container) {
		var calendarType = container.closest('.js-modal-container').find('.js-calendar-type').val();
		this.setContainer(container);
		if (calendarType === 'Extended') {
			this.registerExtendCalendar();
		} else {
			this.registerStandardCalendar();
		}
	}
});
//# sourceMappingURL=QuickCreate.min.js.map
