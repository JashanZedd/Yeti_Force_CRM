'use strict';

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

jQuery(document).ready(function ($) {
	if (window.loadInRelationTomeControl == undefined) {
		jQuery.Class("OSSTimeControl_Calendar_Js", {}, {
			chart: false,
			loadChart: function loadChart() {
				var data = $('.sumaryRelatedTimeControl .widgetData').val();
				if (data == undefined || data == '') {
					return false;
				}
				var jdata = JSON.parse(data);
				if (jdata.datasets.length == 0 || jdata.datasets[0].data.length == 0) {
					return false;
				}

				jdata.datasets[0].datalabels = {
					font: {
						weight: 'bold'
					},
					color: 'white',
					anchor: 'end',
					align: 'start'
				};

				new Chart($(this.chart).find("canvas")[0].getContext("2d"), {
					type: 'bar',
					data: jdata,
					options: {
						tooltips: {
							callbacks: {
								labelColor: function labelColor(tooltipItem, chart) {
									return {
										borderColor: jdata.datasets[0].backgroundColor[tooltipItem['index']],
										backgroundColor: jdata.datasets[0].borderColor[tooltipItem['index']]
									};
								},
								title: function title(_ref, chart) {
									var _ref2 = slicedToArray(_ref, 1),
									    tooltipItem = _ref2[0];

									return jdata.datasets[0].tooltips[tooltipItem['index']];
								},
								label: function label(tooltipItem, chart) {
									return jdata.datasets[0].data[tooltipItem['index']];
								}
							}
						},
						legend: {
							display: false
						},
						title: {
							display: true,
							position: 'top',
							text: jdata.title
						},
						maintainAspectRatio: false,
						scales: {
							yAxes: [{
								ticks: {
									beginAtZero: true
								}
							}]
						}
					}
				});
			},
			registerSwitch: function registerSwitch() {
				$(".switchChartContainer").on('click', function () {
					var chartContainer = $('.chartContainer')[0];
					if ($(chartContainer).is(':visible')) {
						$(this).find('.fas').removeClass('fa-chevron-up').addClass('fa-chevron-down');
						$(".chartContainer").hide();
					} else {
						$(this).find('.fas').removeClass('fa-chevron-down').addClass('fa-chevron-up');
						$(".chartContainer").show();
					}
				});
			},
			registerEvents: function registerEvents() {
				this.chart = $('.sumaryRelatedTimeControl .chartBlock');
				this.loadChart();
				this.registerSwitch();
			}
		});
	}
	var instance = new OSSTimeControl_Calendar_Js();
	instance.registerEvents();
	window.loadInRelationTomeControl = true;
});
//# sourceMappingURL=InRelation.min.js.map
