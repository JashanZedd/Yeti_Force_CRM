'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

Vtiger_Detail_Js('HelpDesk_Detail_Js', {
	setAccountsReference: function setAccountsReference() {
		app.showRecordsList({
			module: 'Accounts',
			src_module: 'HelpDesk',
			src_record: app.getRecordId()
		}, function (modal, instance) {
			instance.setSelectEvent(function (responseData) {
				Vtiger_Detail_Js.getInstance().saveFieldValues({
					field: 'parent_id',
					value: responseData.id
				}).done(function (response) {
					location.reload();
				});
			});
		});
	}
}, {
	registerSetServiceContracts: function registerSetServiceContracts() {
		var thisInstance = this;
		$('.selectServiceContracts').on('click', 'ul li', function (e) {
			var element = jQuery(e.currentTarget);
			thisInstance.saveFieldValues({
				setRelatedFields: true,
				field: 'servicecontractsid',
				value: element.data('id')
			}).done(function (response) {
				location.reload();
			});
		});
	},
	/**
  * Function to get response from hierarchy
  * @param {array} params
  * @returns {jQuery}
  */
	getHierarchyResponseData: function getHierarchyResponseData(params) {
		var thisInstance = this,
		    aDeferred = $.Deferred();
		if (!$.isEmptyObject(thisInstance.hierarchyResponseCache)) {
			aDeferred.resolve(thisInstance.hierarchyResponseCache);
		} else {
			AppConnector.request(params).then(function (data) {
				thisInstance.hierarchyResponseCache = data;
				aDeferred.resolve(thisInstance.hierarchyResponseCache);
			});
		}
		return aDeferred.promise();
	},
	/**
  * Function to display the hierarchy response data
  * @param {array} data
  */
	displayHierarchyResponseData: function displayHierarchyResponseData(data) {
		var thisInstance = this;
		var callbackFunction = function callbackFunction() {
			app.showScrollBar($('#hierarchyScroll'), {
				height: '300px',
				railVisible: true,
				size: '6px'
			});
		};
		app.showModalWindow(data, function (modal) {
			thisInstance.registerChangeStatusInHierarchy(modal);
			if (typeof callbackFunction == 'function' && $('#hierarchyScroll').height() > 300) {
				callbackFunction();
			}
		});
	},
	/**
  * Registers read count of hierarchy if it is possible
  */
	registerHierarchyRecordCount: function registerHierarchyRecordCount() {
		var hierarchyButton = $('.js-detail-hierarchy'),
		    params = {
			module: app.getModuleName(),
			action: 'RelationAjax',
			record: app.getRecordId(),
			mode: 'getHierarchyCount'
		};
		if (hierarchyButton.length) {
			AppConnector.request(params).then(function (response) {
				if (response.success) {
					$('.hierarchy .badge').html(response.result);
				}
			});
		}
	},
	/**
  * Shows hierarchy
  */
	registerShowHierarchy: function registerShowHierarchy() {
		var thisInstance = this,
		    hierarchyButton = $('.detailViewTitle'),
		    params = {
			module: app.getModuleName(),
			view: 'Hierarchy',
			record: app.getRecordId()
		};
		hierarchyButton.on('click', '.js-detail-hierarchy', function () {
			var progressIndicatorElement = $.progressIndicator({
				position: 'html',
				blockInfo: {
					enabled: true
				}
			});
			thisInstance.getHierarchyResponseData(params).then(function (data) {
				thisInstance.displayHierarchyResponseData(data);
				progressIndicatorElement.progressIndicator({ mode: 'hide' });
			});
		});
	},

	/**
  * Function to register events on update hierarchy button
  *
  * @param {jQuery} container
  */
	registerChangeStatusInHierarchy: function registerChangeStatusInHierarchy(container) {
		container.find('.js-update-hierarchy').on('click', function () {
			var params = {
				module: app.getModuleName(),
				action: 'ChangeStatus',
				recordsType: container.find('.js-selected-records').val(),
				status: container.find('.js-status').val(),
				record: app.getRecordId()
			};
			AppConnector.request(params).done(function (data) {
				if (data.success) {
					Vtiger_Helper_Js.showPnotify({ text: data.result.data, type: 'success' });
				}
				app.hideModalWindow();
			});
		});
	},
	/**
  * Show confirmation on event click
  * @param {jQuery} element
  * @param {string} picklistName
  */
	showProgressConfirmation: function showProgressConfirmation(element, picklistName) {
		var _this = this;

		var picklistValue = $(element).data('picklistValue');
		Vtiger_Helper_Js.showConfirmationBox({
			title: $(element).data('picklistLabel'),
			message: app.vtranslate('JS_CHANGE_VALUE_CONFIRMATION')
		}).done(function () {
			var progressIndicatorElement = $.progressIndicator();
			_this.saveFieldValues({
				value: picklistValue,
				field: picklistName
			}).done(function (data) {
				progressIndicatorElement.progressIndicator({ mode: 'hide' });
				if (data.success) {
					window.location.reload();
				}
			}).fail(function (error, err) {
				progressIndicatorElement.progressIndicator({ mode: 'hide' });
				app.errorLog(error, err);
			});
		});
	},
	/**
  * Function save field values
  * @param {array} fieldDetailList
  */
	saveFieldValues: function saveFieldValues(fieldDetailList) {
		var _this2 = this;

		var self = this;
		var aDeferred = jQuery.Deferred();
		var recordId = app.getRecordId();
		var data = {};
		if (typeof fieldDetailList !== 'undefined') {
			data = fieldDetailList;
		}
		var saveData = function saveData() {
			var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

			data['record'] = recordId;
			data['module'] = app.getModuleName();
			data['action'] = 'SaveAjax';
			var params = {};
			params.data = data;
			params.async = false;
			params.dataType = 'json';
			AppConnector.request(params).done(function (reponseData) {
				aDeferred.resolve(reponseData);
				if (reload) {
					window.location.reload();
				}
			});
		};
		if (fieldDetailList.field === 'ticketstatus' && (CONFIG.checkIfRecordHasTimeControl || CONFIG.checkIfRelatedTicketsAreClosed)) {
			AppConnector.request({
				action: 'CheckValidateToClose',
				module: app.getModuleName(),
				record: recordId,
				status: fieldDetailList.value
			}).done(function (response) {
				if (response.result.hasTimeControl.result && response.result.relatedTicketsClosed.result) {
					saveData(false);
				} else {
					var addTimeControlCb = saveData;
					if (!response.result.relatedTicketsClosed.result) {
						Vtiger_Helper_Js.showPnotify({
							text: response.result.relatedTicketsClosed.message,
							type: 'info'
						});
						addTimeControlCb = function addTimeControlCb() {
							_this2.saveFieldValues(fieldDetailList);
						};
					}
					if (!response.result.hasTimeControl.result) {
						Vtiger_Helper_Js.showPnotify({
							text: response.result.hasTimeControl.message,
							type: 'info'
						});
						self.addTimeControl({
							recordId: recordId,
							url: 'index.php?module=OSSTimeControl&view=Edit&sourceModule=HelpDesk&sourceRecord=' + recordId + '&relationOperation=true&subprocess=' + recordId + '&subprocess=' + recordId
						}, addTimeControlCb);
					}
				}
				aDeferred.resolve({ success: false });
			});
			return aDeferred.promise();
		} else {
			saveData(false);
			return aDeferred.promise();
		}
	},
	/**
  * Add time control when closed ticket
  * @param {array} params
  */
	addTimeControl: function addTimeControl(params) {
		var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

		var aDeferred = jQuery.Deferred();
		var referenceModuleName = 'OSSTimeControl';
		var parentId = params.recordId;
		var parentModule = 'HelpDesk';
		var quickCreateParams = {};
		var relatedParams = {};
		var relatedField = 'subprocess';
		var fullFormUrl = params.url;
		relatedParams[relatedField] = parentId;
		var eliminatedKeys = new Array('view', 'module', 'mode', 'action');

		var preQuickCreateSave = function preQuickCreateSave(data) {
			var index = void 0,
			    queryParam = void 0,
			    queryParamComponents = void 0;
			var queryParameters = [];

			if (typeof fullFormUrl !== 'undefined' && fullFormUrl.indexOf('?') !== -1) {
				var urlSplit = fullFormUrl.split('?');
				var queryString = urlSplit[1];
				queryParameters = queryString.split('&');
				for (index = 0; index < queryParameters.length; index++) {
					queryParam = queryParameters[index];
					queryParamComponents = queryParam.split('=');
					if (queryParamComponents[0] == 'mode' && queryParamComponents[1] == 'Calendar') {
						data.find('a[data-tab-name="Task"]').trigger('click');
					}
				}
			}
			jQuery('<input type="hidden" name="sourceModule" value="' + parentModule + '" />').appendTo(data);
			jQuery('<input type="hidden" name="sourceRecord" value="' + parentId + '" />').appendTo(data);
			jQuery('<input type="hidden" name="relationOperation" value="true" />').appendTo(data);

			{
				var field = data.find('[name="' + relatedField + '"]');
				if (field.length == 0) {
					jQuery('<input type="hidden" name="' + relatedField + '" value="' + parentId + '" />').appendTo(data);
				}
			}
			for (index = 0; index < queryParameters.length; index++) {
				queryParam = queryParameters[index];
				queryParamComponents = queryParam.split('=');
				if (jQuery.inArray(queryParamComponents[0], eliminatedKeys) == '-1' && data.find('[name="' + queryParamComponents[0] + '"]').length == 0) {
					jQuery('<input type="hidden" name="' + queryParamComponents[0] + '" value="' + queryParamComponents[1] + '" />').appendTo(data);
				}
			}
		};
		if (typeof fullFormUrl !== 'undefined' && fullFormUrl.indexOf('?') !== -1) {
			var urlSplit = fullFormUrl.split('?');
			var queryString = urlSplit[1];
			var queryParameters = queryString.split('&');
			for (var index = 0; index < queryParameters.length; index++) {
				var queryParam = queryParameters[index];
				var queryParamComponents = queryParam.split('=');
				if (jQuery.inArray(queryParamComponents[0], eliminatedKeys) == '-1') {
					relatedParams[queryParamComponents[0]] = queryParamComponents[1];
				}
			}
		}

		quickCreateParams['data'] = relatedParams;
		quickCreateParams['callbackFunction'] = callback;
		quickCreateParams['callbackPostShown'] = preQuickCreateSave;
		quickCreateParams['noCache'] = true;
		Vtiger_Header_Js.getInstance().quickCreateModule(referenceModuleName, quickCreateParams);
		return aDeferred.promise();
	},

	registerEvents: function registerEvents() {
		this._super();
		this.registerSetServiceContracts();
		this.registerHierarchyRecordCount();
		this.registerShowHierarchy();
	}
});
//# sourceMappingURL=Detail.min.js.map
