'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

Vtiger_Edit_Js('HelpDesk_Edit_Js', {}, {
	/**
  * Register pre save event
  * @param {jQuery} form
  */
	registerRecordPreSaveEventEvent: function registerRecordPreSaveEventEvent(form) {
		var self = this;
		var lockSave = true;
		form.on(Vtiger_Edit_Js.recordPreSave, function (e, data) {
			var closedStatus = JSON.parse(app.getMainParams('closeTicketForStatus'));
			var status = form.find('[name="ticketstatus"] :selected').val();
			var progress = $.progressIndicator({ position: 'html', blockInfo: { enabled: true } });
			var isClosedStatusSet = status in closedStatus;
			var recordId = app.getRecordId();
			if ((app.getMainParams('checkIfRecordHasTimeControl') || app.getMainParams('checkIfRelatedTicketsAreClosed')) && isClosedStatusSet && recordId && !data.module) {
				if (lockSave && recordId) {
					e.preventDefault();
					AppConnector.request({
						action: 'CheckValidateToClose',
						module: app.getModuleName(),
						record: recordId,
						status: form.find('[name="ticketstatus"] :selected').val()
					}).done(function (response) {
						progress.progressIndicator({ mode: 'hide' });
						if (response.result.hasTimeControl.result && response.result.relatedTicketsClosed.result) {
							lockSave = false;
							form.submit();
						}
						if (!response.result.hasTimeControl.result) {
							Vtiger_Helper_Js.showPnotify({
								text: response.result.hasTimeControl.message,
								type: 'info'
							});
							self.addTimeControl({
								recordId: recordId,
								url: 'index.php?module=OSSTimeControl&view=Edit&sourceModule=HelpDesk&sourceRecord=' + recordId + '&relationOperation=true&subprocess=' + recordId + '&subprocess=' + recordId
							});
						}
						if (!response.result.relatedTicketsClosed.result) {
							Vtiger_Helper_Js.showPnotify({
								text: response.result.relatedTicketsClosed.message,
								type: 'info'
							});
						}
					});
				}
			}
			if (isClosedStatusSet && (!recordId || data.module)) {
				Vtiger_Helper_Js.showPnotify({
					text: app.vtranslate('JS_CANT_CLOSE_NEW_RECROD'),
					type: 'info'
				});
				progress.progressIndicator({ mode: 'hide' });
				e.preventDefault();
			}
		});
	},
	/**
  * Add time control when closed ticket
  * @param {array} params
  */
	addTimeControl: function addTimeControl(params) {
		var aDeferred = jQuery.Deferred();
		var referenceModuleName = 'OSSTimeControl';
		var parentId = params.recordId;
		var parentModule = 'HelpDesk';
		var quickCreateParams = {};
		var relatedParams = {};
		var relatedField = 'subprocess';
		var fullFormUrl = params.url;
		relatedParams[relatedField] = parentId;
		var eliminatedKeys = new Array('view', 'module', 'mode', 'action');

		var preQuickCreateSave = function preQuickCreateSave(data) {
			var index = void 0,
			    queryParam = void 0,
			    queryParamComponents = void 0;
			var queryParameters = [];

			if (typeof fullFormUrl !== 'undefined' && fullFormUrl.indexOf('?') !== -1) {
				var urlSplit = fullFormUrl.split('?');
				var queryString = urlSplit[1];
				queryParameters = queryString.split('&');
				for (index = 0; index < queryParameters.length; index++) {
					queryParam = queryParameters[index];
					queryParamComponents = queryParam.split('=');
					if (queryParamComponents[0] == 'mode' && queryParamComponents[1] == 'Calendar') {
						data.find('a[data-tab-name="Task"]').trigger('click');
					}
				}
			}
			jQuery('<input type="hidden" name="sourceModule" value="' + parentModule + '" />').appendTo(data);
			jQuery('<input type="hidden" name="sourceRecord" value="' + parentId + '" />').appendTo(data);
			jQuery('<input type="hidden" name="relationOperation" value="true" />').appendTo(data);

			{
				var field = data.find('[name="' + relatedField + '"]');
				if (field.length == 0) {
					jQuery('<input type="hidden" name="' + relatedField + '" value="' + parentId + '" />').appendTo(data);
				}
			}
			for (index = 0; index < queryParameters.length; index++) {
				queryParam = queryParameters[index];
				queryParamComponents = queryParam.split('=');
				if (jQuery.inArray(queryParamComponents[0], eliminatedKeys) == '-1' && data.find('[name="' + queryParamComponents[0] + '"]').length == 0) {
					jQuery('<input type="hidden" name="' + queryParamComponents[0] + '" value="' + queryParamComponents[1] + '" />').appendTo(data);
				}
			}
		};
		if (typeof fullFormUrl !== 'undefined' && fullFormUrl.indexOf('?') !== -1) {
			var urlSplit = fullFormUrl.split('?');
			var queryString = urlSplit[1];
			var queryParameters = queryString.split('&');
			for (var index = 0; index < queryParameters.length; index++) {
				var queryParam = queryParameters[index];
				var queryParamComponents = queryParam.split('=');
				if (jQuery.inArray(queryParamComponents[0], eliminatedKeys) == '-1') {
					relatedParams[queryParamComponents[0]] = queryParamComponents[1];
				}
			}
		}

		quickCreateParams['data'] = relatedParams;
		quickCreateParams['callbackFunction'] = function () {};
		quickCreateParams['callbackPostShown'] = preQuickCreateSave;
		quickCreateParams['noCache'] = true;
		Vtiger_Header_Js.getInstance().quickCreateModule(referenceModuleName, quickCreateParams);
		return aDeferred.promise();
	}
});
//# sourceMappingURL=Edit.min.js.map
