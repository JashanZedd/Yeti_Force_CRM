'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

var Gantt = function () {
	/**
  * Constructor
  *
  * @param {jQuery|HTMLElement|string} container
  * @param {object} projectData
  */
	function Gantt(container, projectData) {
		classCallCheck(this, Gantt);

		this.container = $(container);
		this.containerParent = this.container.parent();
		this.headerContainer = this.containerParent.parent().find('.js-gantt-header').eq(0);
		this.weekStart = 6 - CONFIG.firstDayOfWeekNos;
		var workingDays = [1, 2, 3, 4, 5];
		this.options = {
			slots: {
				header: {
					beforeOptions: '<button class="btn btn-primary pb-2 mr-2 h-100 js-gantt__front-filter"><span class="fas fa-filter"></span> ' + LANG.JS_GANTT_FILTER + '</button>'
				}
			},
			maxRows: 30,
			times: {
				timeZoom: 20
			},
			calendar: {
				workingDays: workingDays
			},
			title: {
				label: LANG.JS_GANTT_TITLE,
				html: true
			},
			taskList: {
				expander: {
					straight: false
				},
				columns: [{
					id: 1,
					label: app.vtranslate('JS_NO.'),
					html: true,
					value: 'number',
					width: 65
				}, {
					id: 2,
					label: app.vtranslate('JS_NAME'),
					html: true,
					value: 'label',
					width: 280,
					expander: true
				}, { id: 3, label: app.vtranslate('JS_PRIORITY'), value: 'priority_label', width: 70 }, { id: 3, label: app.vtranslate('JS_STATUS'), value: 'status_label', width: 80 }, {
					id: 4,
					label: app.vtranslate('JS_DAYS'),
					value: function value(task) {
						return task.duration / 24 / 60 / 60;
					},
					width: 75,
					style: {
						'task-list-header-label': {
							'text-align': 'center',
							width: '100%'
						},
						'task-list-item-value-container': {
							'text-align': 'center',
							width: '100%'
						}
					}
				}, {
					id: 5,
					label: app.vtranslate('JS_PLANNED'),
					value: function value(task) {
						return task.planned_duration;
					},
					width: 85,
					style: {
						'task-list-header-label': {
							'text-align': 'center',
							width: '100%'
						},
						'task-list-item-value-container': {
							'text-align': 'center',
							width: '100%'
						}
					}
				}, {
					id: 6,
					label: app.vtranslate('JS_REALISATION'),
					value: 'sum_time',
					width: 85,
					style: {
						'task-list-header-label': {
							'text-align': 'center',
							width: '100%'
						},
						'task-list-item-value-container': {
							'text-align': 'center',
							width: '100%'
						}
					}
				}, { id: 7, label: app.vtranslate('JS_ASSIGNED', 'Project'), value: 'assigned_user_name', width: 110 }, {
					id: 8,
					label: '%',
					value: 'progress',
					width: 35,
					style: {
						'task-list-header-label': {
							'text-align': 'center',
							width: '100%'
						},
						'task-list-item-value-container': {
							'text-align': 'center',
							width: '100%'
						}
					}
				}]
			}
		};
		this.dynamicStyle = {
			'chart-expander-wrapper': {
				'line-height': '1'
			},
			'chart-row-bar-polygon': {
				stroke: '#E74C3C00',
				'stroke-width': 0,
				fill: '#F75C4C'
			},
			'chart-row-progress-bar-outline': {
				stroke: '#E74C3C00',
				'stroke-width': 0
			},
			'chart-days-highlight-rect': {
				fill: '#f3f5f780'
			},
			'header-title': {
				float: 'none',
				display: 'inline-flex',
				overflow: 'hidden'
			},
			'header-options': {
				float: 'none',
				display: 'inline-flex'
			},
			'header-title--html': {
				'white-space': 'nowrap',
				overflow: 'hidden',
				'text-overflow': 'ellipsis',
				'padding-left': '0',
				'letter-spacing': '0'
			},
			'slot-header-beforeOptions': {
				height: '100%',
				'vertical-align': 'top'
			}
		};
		this.registerLanguage();
		if (typeof projectData !== 'undefined') {
			this.options.title.label = projectData;
			this.loadProject(projectData);
		}
		this.registerEvents();
	}

	/**
  * Register language translations globally (replace old ones)
  */


	createClass(Gantt, [{
		key: 'registerLanguage',
		value: function registerLanguage() {
			this.options.locale = {
				name: CONFIG.langKey,
				weekStart: this.weekStart,
				weekdays: [LANG.JS_SUNDAY, LANG.JS_MONDAY, LANG.JS_TUESDAY, LANG.JS_WEDNESDAY, LANG.JS_THURSDAY, LANG.JS_FRIDAY, LANG.JS_SATURDAY],
				weekdaysShort: [LANG.JS_SUN, LANG.JS_MON, LANG.JS_TUE, LANG.JS_WED, LANG.JS_THU, LANG.JS_FRI, LANG.JS_SAT],
				weekdaysMin: [LANG.JS_SUN, LANG.JS_MON, LANG.JS_TUE, LANG.JS_WED, LANG.JS_THU, LANG.JS_FRI, LANG.JS_SAT],
				months: [LANG.JS_JANUARY, LANG.JS_FEBRUARY, LANG.JS_MARCH, LANG.JS_APRIL, LANG.JS_MAY, LANG.JS_JUNE, LANG.JS_JULY, LANG.JS_AUGUST, LANG.JS_SEPTEMBER, LANG.JS_NOVEMBER, LANG.JS_OCTOBER, LANG.JS_DECEMBER],
				monthsShort: [LANG.JS_JAN, LANG.JS_FEB, LANG.JS_MAR, LANG.JS_APR, LANG.JS_MAY, LANG.JS_JUN, LANG.JS_JUL, LANG.JS_AUG, LANG.JS_SEP, LANG.JS_NOV, LANG.JS_OCT, LANG.JS_DEC],
				ordinal: function ordinal(n) {
					return '' + n;
				},
				Now: LANG.JS_GANTT_NOW,
				'X-Scale': LANG.JS_GANTT_ZOOM_X,
				'Y-Scale': LANG.JS_GANTT_ZOOM_Y,
				'Task list width': LANG.JS_GANTT_TASKLIST,
				'Before/After': LANG.JS_GANTT_EXPAND,
				'Display task list': LANG.JS_GANTT_TASKLIST_VISIBLE
			};
		}

		/**
   * Filter project data
   *
   * @param {Object} projectData
   * @returns {Object}
   */

	}, {
		key: 'filterProjectData',
		value: function filterProjectData(projectData) {
			var _this = this;

			var tasks = this.allTasks.map(function (task) {
				return Object.assign({}, task);
			});

			var _loop = function _loop(moduleName) {
				if (_this.filter.status.hasOwnProperty(moduleName)) {
					var visibleLabels = _this.filter.status[moduleName].map(function (status) {
						return status.label;
					});
					tasks = tasks.filter(function (task) {
						if (task.module !== moduleName) {
							return true;
						}
						if (visibleLabels.indexOf(task.status_label) >= 0) {
							return true;
						}
						return false;
					});
				}
			};

			for (var moduleName in this.filter.status) {
				_loop(moduleName);
			}
			return tasks;
		}

		/**
   * Add icons to tasks
   * @param {array} tasks
   * @returns {array}
   */

	}, {
		key: 'addIcons',
		value: function addIcons(tasks) {
			return tasks.map(function (task) {
				var icon = 'briefcase';
				if (task.type === 'milestone') {
					icon = 'folder';
				} else if (task.type === 'task') {
					icon = 'file';
				}
				var iconClass = 'fas fa-' + icon;
				task.label = '<span class="' + iconClass + ' fa-lg mr-1"></span> ' + task.label;
				return task;
			});
		}

		/**
   * Resize gantt chart
   */

	}, {
		key: 'resize',
		value: function resize() {
			var offsetTop = this.container.offset().top;
			var contentHeight = $('body').eq(0).height() - $('.js-footer').eq(0).height();
			var height = contentHeight - offsetTop - 100;
			if (height < 300) {
				height = 300;
			}
			this.options.maxHeight = height;
			if (typeof this.ganttState !== 'undefined' && this.ganttState) {
				this.ganttState.maxHeight = height;
			}
		}

		/**
   * Register gantt header actions
   */

	}, {
		key: 'registerHeaderActions',
		value: function registerHeaderActions() {
			var _this2 = this;

			this.headerContainer.find('.js-gantt-header__btn-filter').on('click', function (e) {
				e.preventDefault();
				_this2.showFiltersModal();
			});
			this.headerContainer.find('.js-gantt-header__btn-center').on('click', function (e) {
				_this2.ganttElastic.$emit('recenterPosition');
			});
			this.headerContainer.find('.js-gantt-header__range-slider--x').on('input', function (e) {
				_this2.ganttElastic.$emit('times-timeZoom-change', Number(e.target.value));
			});
			this.headerContainer.find('.js-gantt-header__range-slider--y').on('input', function (e) {
				_this2.ganttElastic.$emit('row-height-change', Number(e.target.value));
			});
			this.headerContainer.find('.js-gantt-header__range-slider--task-list-width').on('input', function (e) {
				_this2.ganttElastic.$emit('taskList-width-change', Number(e.target.value));
			});
			this.headerContainer.find('.js-gantt-header__range-slider--scope').on('input', function (e) {
				_this2.ganttElastic.$emit('scope-change', Number(e.target.value));
			});
			this.headerContainer.find('.js-gantt-header__range-slider--task-list-visible').on('change', function (e) {
				_this2.ganttState.options.taskList.display = $(e.target).is(':checked');
			});
			this.ganttElastic.$watch('state.taskList.display', function (value) {
				_this2.headerContainer.find('.js-gantt-header__range-slider--task-list-visible').prop('checked', value);
			});
			this.headerContainer.find('.js-gantt-header__range-slider--task-list-visible').prop('checked', this.ganttState.options.taskList.display ? 'checked' : false);
		}

		/**
   * Load project
   */

	}, {
		key: 'loadProject',
		value: function loadProject(projectData) {
			this.projectData = projectData;
			if (typeof this.projectData.tasks === 'undefined' || this.projectData.tasks.length === 0) {
				$('.js-hide-filter').addClass('d-none');
				$('.js-show-add-record').removeClass('d-none');
				return;
			} else {
				this.allTasks = this.addIcons(this.projectData.tasks);
			}
			this.statuses = this.projectData.statuses;
			this.filter = { status: this.projectData.activeStatuses };
			this.container.closest('form').on('submit', function (ev) {
				ev.preventDefault();
				ev.stopPropagation();
				return false;
			});
			this.resize();
			var self = this;
			if (typeof self.ganttElastic === 'undefined') {
				this.ganttApp = GanttElastic.mount({
					el: '#' + this.container.attr('id'),
					data: {
						tasks: this.allTasks,
						options: this.options,
						dynamicStyle: this.dynamicStyle
					},
					ready: function ready(ganttElasticInstance) {
						self.ganttElastic = ganttElasticInstance;
						self.ganttState = ganttElasticInstance.state;
						self.registerHeaderActions();
					}
				});
				this.container = this.containerParent.find('.gantt-elastic').eq(0);
			} else {
				self.ganttApp.tasks = this.allTasks;
			}
		}

		/**
   * Load project from ajax request
   * @param {object} params - request params such as module/action and projectId
   */

	}, {
		key: 'loadProjectFromAjax',
		value: function loadProjectFromAjax(params) {
			var self = this,
			    progressInstance = jQuery.progressIndicator({
				blockInfo: {
					enabled: true,
					onBlock: function onBlock() {
						AppConnector.request(params).done(function (response) {
							self.loadProject(response.result);
							progressInstance.progressIndicator({ mode: 'hide' });
						});
					}
				}
			});
		}

		/**
   * Load new data to gantt
   *
   * @param {Object} data
   */

	}, {
		key: 'reloadData',
		value: function reloadData(data) {
			this.loadProject(data);
		}

		/**
   * Save filter and reload data.
   *
   * @param {Object} filterOptions
   */

	}, {
		key: 'saveFilter',
		value: function saveFilter(filterOptions) {
			this.filter = filterOptions;
			this.ganttApp.tasks = this.filterProjectData(this.projectData);
		}

		/**
   * Get status from value (object with other props)
   * @param {String} value
   * @param {String} moduleName
   * @returns {Object}
   */

	}, {
		key: 'getStatusFromValue',
		value: function getStatusFromValue(value, moduleName) {
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = this.statuses[moduleName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var status = _step.value;

					if (status.value === value) {
						return Object.assign({}, status);
					}
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			app.errorLog('Status not found [' + value + ']');
		}

		/**
   * Open modal with status filters
   */

	}, {
		key: 'showFiltersModal',
		value: function showFiltersModal() {
			var _this3 = this;

			var self = this;
			var box = bootbox.dialog({
				show: 'false',
				message: '<div class="js-gantt__filter-modal form" data-js="container">\n\t\t\t\t<div class="form-group">\n\t\t\t\t\t<label>' + app.vtranslate('JS_PROJECT_STATUSES', 'Project') + ':</label>\n\t\t\t\t\t<select class="select2 form-control" id="js-gantt__filter-project" multiple>\n\t\t\t\t\t\t' + self.statuses.Project.map(function (status) {
					return '<option value="' + status.value + '" ' + (_this3.filter.status.Project.map(function (status) {
						return status.value;
					}).indexOf(status.value) >= 0 ? 'selected' : '') + '>' + status.label + '</option>';
				}) + '\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t<label>' + app.vtranslate('JS_MILESTONE_STATUSES', 'Project') + ':</label>\n\t\t\t\t\t<select class="select2 form-control" id="js-gantt__filter-milestone" multiple>\n\t\t\t\t\t\t' + self.statuses.ProjectMilestone.map(function (status) {
					return '<option value="' + status.value + '" ' + (_this3.filter.status.ProjectMilestone.map(function (status) {
						return status.value;
					}).indexOf(status.value) >= 0 ? 'selected' : '') + '>' + status.label + '</option>';
				}) + '\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group">\n\t\t\t\t<label>' + app.vtranslate('JS_TASK_STATUSES', 'Project') + ':</label>\n\t\t\t\t\t<select class="select2 form-control" id="js-gantt__filter-task" multiple>\n\t\t\t\t\t\t' + self.statuses.ProjectTask.map(function (status) {
					return '<option value="' + status.value + '" ' + (_this3.filter.status.ProjectTask.map(function (status) {
						return status.value;
					}).indexOf(status.value) >= 0 ? 'selected' : '') + '>' + status.label + '</option>';
				}) + '\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>',
				title: '<span class="fas fa-filter"></span> ' + app.vtranslate('JS_FILTER_BY_STATUSES', 'Project'),
				buttons: {
					success: {
						label: '<span class="fas fa-check mr-1"></span>' + app.vtranslate('JS_UPDATE_GANTT', 'Project'),
						className: 'btn-success',
						callback: function callback() {
							self.saveFilter({
								status: {
									Project: $('#js-gantt__filter-project', this).val().map(function (status) {
										return self.getStatusFromValue(status, 'Project');
									}),
									ProjectMilestone: $('#js-gantt__filter-milestone', this).val().map(function (status) {
										return self.getStatusFromValue(status, 'ProjectMilestone');
									}),
									ProjectTask: $('#js-gantt__filter-task', this).val().map(function (status) {
										return self.getStatusFromValue(status, 'ProjectTask');
									})
								}
							});
						}
					},
					danger: {
						label: '<span class="fas fa-times mr-1"></span>' + app.vtranslate('JS_CANCEL'),
						className: 'btn-danger',
						callback: function callback() {}
					}
				}
			});
			App.Fields.Picklist.showSelect2ElementView($(box).find('.select2'));
			box.show();
		}

		/**
   * Register events for gantt actions in current container
   */

	}, {
		key: 'registerEvents',
		value: function registerEvents() {
			var _this4 = this;

			var container = this.container;
			container.find('[data-toggle="tooltip"]').tooltip();
			window.addEventListener('resize', function () {
				_this4.resize();
			});
		}
	}]);
	return Gantt;
}();
//# sourceMappingURL=Gantt.min.js.map
