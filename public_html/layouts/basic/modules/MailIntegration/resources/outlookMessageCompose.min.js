'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

var MailIntegration_Compose = {
	/**
  * AppConnector wrapper
  *
  * @param   {object}  request
  *
  * @return  {object}           AppConnector object with done method
  */
	connector: function connector(request) {
		var _this = this;

		return AppConnector.request(request).fail(function (error) {
			_this.showResponseMessage(false);
		});
	},

	/**
  * Show response message
  *
  * @param   {boolean}  success
  * @param   {string}  message
  */
	showResponseMessage: function showResponseMessage(success) {
		var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

		if (success) {
			Office.context.mailbox.item.notificationMessages.replaceAsync('information', {
				type: 'informationalMessage',
				message: message,
				icon: 'iconid',
				persistent: false
			});
		} else {
			Office.context.mailbox.item.notificationMessages.replaceAsync('error', {
				type: 'errorMessage',
				message: app.vtranslate('JS_ERROR') + ' ' + message
			});
		}
	},

	/**
  * Registered autocomplete template
  *
  * @return  {object}  overwrite ui-autocomplete list item template
  */
	registerAutocompleteTemplate: function registerAutocompleteTemplate() {
		$.widget('ui.autocomplete', $.ui.autocomplete, {
			_renderItem: function _renderItem(ul, item) {
				var listItemTemplate = function listItemTemplate(user) {
					return '\n\t\t\t\t\t\t\t<li class="c-search-item js-search-item">\n\t\t\t\t\t\t\t\t<div class="d-flex flex-nowrap">\n\t\t\t\t\t\t\t\t\t<div class="d-flex flex-wrap">\n\t\t\t\t\t\t\t\t\t\t<div class="u-font-size-14px">\n\t\t\t\t\t\t\t\t\t\t\t' + user.name + '\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class="c-search-item__mail small">\n\t\t\t\t\t\t\t\t\t\t\t' + user.mail + '\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class="btn-group flex-nowrap align-items-center">\n\t\t\t\t\t\t\t\t\t\t<button class="c-search-item__btn btn btn-xs btn-outline-primary" data-copy-target="cc">\n\t\t\t\t\t\t\t\t\t\t\t' + app.vtranslate('JS_CC') + '\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<button class="c-search-item__btn btn btn-xs btn-outline-primary" data-copy-target="bcc">\n\t\t\t\t\t\t\t\t\t\t\t' + app.vtranslate('JS_BCC') + '\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>';
				};
				return $(listItemTemplate(item)).appendTo(ul);
			}
		});
	},

	/**
  * Register autocomplete
  *
  * @return  {object}  autocomplete instance
  */
	registerAutocomplete: function registerAutocomplete() {
		return this.container.find('.js-search-input').autocomplete({
			delay: '600',
			minLength: '3',
			classes: {
				'ui-autocomplete': 'mobile'
			},
			source: this.findEmail.bind(this),
			select: this.onSelectRecipient.bind(this)
		});
	},

	/**
  * Find mail action for autocomplete source
  *
  * @param   {object}  request   autocomplete param
  * @param   {fuction}  callBack  autocomplete callBack
  */
	findEmail: function findEmail(request, callBack) {
		this.connector({
			module: 'MailIntegration',
			action: 'Mail',
			mode: 'findEmail',
			search: request.term
		}).done(function (responseData) {
			var data = responseData.result.map(function (user) {
				var userData = user.split(' <');
				var name = userData[0];
				var mail = userData[1].slice(0, -1);
				return { name: name, mail: mail };
			});
			callBack(data);
		});
	},

	/**
  * [onRecipientSelect description]
  *
  * @param   {object}  toElement  html node object
  * @param   {object}  item       selected item object
  */
	onSelectRecipient: function onSelectRecipient(_ref, _ref2) {
		var toElement = _ref.toElement;
		var item = _ref2.item;

		var newRecipient = [{
			displayName: item.name,
			emailAddress: item.mail
		}];
		var recipientsField = toElement.dataset.copyTarget ? toElement.dataset.copyTarget : 'to';
		this.copyRecipient(recipientsField, newRecipient);
	},

	/**
  * Copy recipient to outlook field
  *
  * @param   {string}  recipientsField  to, cc, bcc
  * @param   {object}  newRecipient
  */
	copyRecipient: function copyRecipient(recipientsField, newRecipient) {
		Office.context.mailbox.item[recipientsField].addAsync(newRecipient, function (result) {
			if (result.error) {
				Office.context.mailbox.item.notificationMessages.replaceAsync('error', {
					type: 'errorMessage',
					message: app.vtranslate('JS_ERROR') + ' ' + result.error
				});
			}
		});
	},
	registerEvents: function registerEvents() {
		if (!$('.js-exception-error').length) {
			this.container = $('#page');
			this.registerAutocompleteTemplate();
			this.registerAutocomplete();
		}
	}
};
(function ($) {
	Office.onReady(function (info) {
		if (info.host === Office.HostType.Outlook) {
			MailIntegration_Compose.registerEvents();
		}
	});
})($);
//# sourceMappingURL=outlookMessageCompose.min.js.map
