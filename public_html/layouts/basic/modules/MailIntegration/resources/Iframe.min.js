'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

var MailIntegration_Iframe = {
	mailId: 0,
	container: {},
	iframe: {},
	iframeWindow: {},
	moduleSelect: {},
	addRecordBtn: {},
	loaderParams: {
		blockInfo: { enabled: true },
		message: false
	},
	/**
  * AppConnector wrapper
  *
  * @param   {object}  request
  *
  * @return  {object}           AppConnector object with done method
  */
	connector: function connector(request) {
		var _this = this;

		return AppConnector.request(request).fail(function (error) {
			_this.hideIframeLoader();
			_this.showResponseMessage(false);
		});
	},

	/**
  * Show response message
  *
  * @param   {boolean}  success
  * @param   {string}  message
  */
	showResponseMessage: function showResponseMessage(success) {
		var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

		if (success) {
			this.mailItem.notificationMessages.replaceAsync("information", {
				type: "informationalMessage",
				message: message,
				icon: "iconid",
				persistent: false
			});
		} else {
			this.mailItem.notificationMessages.replaceAsync("error", {
				type: "errorMessage",
				message: app.vtranslate("JS_ERROR") + " " + message
			});
		}
	},

	/**
  * Register list item events
  */
	registerListItemEvents: function registerListItemEvents() {
		this.container.on("click", ".js-list-item-click", this.onClickListItem.bind(this));
		$(document).on("click", ".popover a", this.onClickLink.bind(this));
		this.container.on("click", ".js-add-related-record", this.onClickQuickCreateBtn.bind(this));
		this.container.on("click", ".js-remove-record", this.onClickDeleteRelation.bind(this));
	},

	/**
  * On ListItem click actions
  *
  * @param   {[type]}  event  [event description]
  *
  * @return  {[type]}         [return description]
  */
	onClickListItem: function onClickListItem(event) {
		var currentTarget = $(event.currentTarget);
		this.toggleActiveListItems(currentTarget);
		this.onClickLink(event, currentTarget.find(".js-record-link").attr("href"));
	},

	/**
  * On link click
  *
  * @param   {object}  event  click event object
  * @param   {string}  url
  */
	onClickLink: function onClickLink(event, url) {
		event.preventDefault();
		if (!url) {
			url = $(event.currentTarget).attr("href");
		}
		this.changeIframeSource(url);
	},

	/**
  * On delete relation click
  *
  * @param   {object}  event  click event
  */
	onClickDeleteRelation: function onClickDeleteRelation(event) {
		var _this2 = this;

		event.stopPropagation();
		var currentTarget = $(event.currentTarget);
		var recordData = currentTarget.closest(".js-list-item-click").data();
		this.connector({
			module: "MailIntegration",
			action: "Mail",
			mode: "deleteRelation",
			mailId: this.mailId,
			record: recordData.id,
			recordModule: recordData.module
		}).done(function (response) {
			_this2.showResponseMessage(response["success"], app.vtranslate("JS_REMOVED_RELATION_SUCCESSFULLY"));
			_this2.reloadView(response["success"]);
		});
	},

	/**
  * On quick create btn click
  *
  * @param   {object}  event  click event
  */
	onClickQuickCreateBtn: function onClickQuickCreateBtn(event) {
		var _this3 = this;

		event.stopPropagation();
		var currentTarget = $(event.currentTarget);
		var recordData = currentTarget.closest(".js-list-item-click").data();
		var callbackFunction = function callbackFunction() {
			_this3.iframeWindow.location.reload();
		};
		var newRecordData = {
			sourceModule: recordData.module,
			sourceRecord: recordData.id
		};
		this.showQuickCreateForm(event.currentTarget.dataset.module, {
			data: newRecordData,
			callbackFunction: callbackFunction
		});
	},

	/**
  * Fill new record data in quick create form
  *
  * @param   {string}  moduleName  [moduleName description]
  *
  * @return  {object}              call asyncGetMailBody which returns Promise
  */
	fillNewRecordData: function fillNewRecordData(moduleName) {
		var _this4 = this;

		var data = {
			email: this.mailItem.from.emailAddress,
			email1: this.mailItem.from.emailAddress,
			relationOperation: true,
			relatedRecords: $.map(this.container.find(".js-list-item-click"), function (record) {
				return { module: record.dataset.module, id: record.dataset.id };
			})
		};
		var fillNameFields = function fillNameFields() {
			var nameData = _this4.mailItem.from.displayName.split(" ");
			var firstName = nameData.shift();
			var lastName = nameData.join(" ");
			data.firstname = firstName;
			data.lastname = lastName;
		};
		switch (moduleName) {
			case "Leads":
				data.company = this.mailItem.from.displayName;
				fillNameFields();
				break;
			case "Contacts":
				fillNameFields();
				break;
			case "Project":
				data.projectname = this.mailItem.subject;
				break;
			case "HelpDesk":
				data.ticket_title = this.mailItem.subject;
				break;
			case "Products":
				data.productname = this.mailItem.subject;
				break;
			case "Services":
				data.servicename = this.mailItem.subject;
				break;
			default:
				break;
		}
		var mailBodyCallback = function mailBodyCallback(body) {
			data.description = body;
			return data;
		};
		return this.asyncGetMailBody(mailBodyCallback);
	},

	/**
  * Toggle active list items
  *
  * @param   {object}  targetListItem  jQuery
  */
	toggleActiveListItems: function toggleActiveListItems(targetListItem) {
		targetListItem.siblings().removeClass("active");
		targetListItem.addClass("active");
	},

	/**
  * Change iframe source
  *
  * @param   {string}  url
  */
	changeIframeSource: function changeIframeSource(url) {
		this.iframe.attr("src", url);
		this.showIframeLoader();
	},

	/**
  * Add relation
  *
  * @param   {number}  recordId
  * @param   {string}  moduleName
  */
	addRelation: function addRelation(recordId, moduleName) {
		var _this5 = this;

		this.connector({
			module: "MailIntegration",
			action: "Mail",
			mode: "addRelation",
			mailId: this.mailId,
			record: recordId,
			recordModule: moduleName
		}).done(function (response) {
			_this5.showResponseMessage(response["success"], app.vtranslate("JS_ADDED_RELATION_SUCCESSFULLY"));
			_this5.reloadView(response["success"]);
		});
	},

	/**
  * Show quick create form
  *
  * @param   {string}  moduleName
  * @param   {object}  quickCreateParams
  */
	showQuickCreateForm: function showQuickCreateForm(moduleName) {
		var quickCreateParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		quickCreateParams = Object.assign({ noCache: true, data: {} }, quickCreateParams);
		this.fillNewRecordData(moduleName).then(function (data) {
			quickCreateParams.data = Object.assign(data, quickCreateParams.data);
			App.Components.QuickCreate.createRecord(moduleName, quickCreateParams);
		});
	},

	/**
  * Register iframe events
  */
	registerIframeEvents: function registerIframeEvents() {
		var _this6 = this;

		var link = this.container.find(".js-list-item-click").first();
		this.initIframeLoader();
		if (link.length) {
			link.addClass("active");
			this.iframe.attr("src", link.find(".js-record-link").attr("href"));
			this.iframe.on("load", function () {
				_this6.hideIframeLoader();
			});
		} else {
			this.hideIframeLoader();
		}
	},

	/**
  * Register import click
  */
	registerImportClick: function registerImportClick() {
		var _this7 = this;

		this.container.on("click", ".js-import-mail", function (e) {
			_this7.showIframeLoader();
			_this7.getMailDetails().then(function (mails) {
				_this7.connector(Object.assign({
					module: "MailIntegration",
					action: "Import"
				}, mails, window.PanelParams)).done(function (response) {
					_this7.hideIframeLoader();
					_this7.showResponseMessage(response["success"], app.vtranslate("JS_IMPORT"));
					_this7.reloadView(response["success"]);
				});
			});
		});
	},

	/**
  * Get mail details
  *
  * @return  {object}  Promise
  */
	getMailDetails: function getMailDetails() {
		var mailItem = this.mailItem;
		if (mailItem.attachments.length > 0) {
			var outputString = "";
			for (var i = 0; i < mailItem.attachments.length; i++) {
				var attachment = mailItem.attachments[i];
				outputString += "<BR>" + i + ". Name: ";
				outputString += attachment.name;
				outputString += "<BR>ID: " + attachment.id;
				outputString += "<BR>contentType: " + attachment.contentType;
				outputString += "<BR>size: " + attachment.size;
				outputString += "<BR>attachmentType: " + attachment.attachmentType;
				outputString += "<BR>isInline: " + attachment.isInline;
			}
		}
		var mailDetails = {
			mailFrom: this.parseEmailAddressDetails(mailItem.from),
			mailSender: mailItem.sender.emailAddress,
			mailTo: this.parseEmailAddressDetails(mailItem.to),
			mailCc: this.parseEmailAddressDetails(mailItem.cc),
			mailMessageId: mailItem.internetMessageId,
			mailSubject: mailItem.subject,
			mailNormalizedSubject: mailItem.normalizedSubject,
			mailDateTimeCreated: mailItem.dateTimeCreated.toISOString()
		};
		var mailBodyCallback = function mailBodyCallback(body) {
			mailDetails.mailBody = body;
			return mailDetails;
		};
		return this.asyncGetMailBody(mailBodyCallback);
	},

	/**
  * Get mail body async function
  *
  * @param   {function}  callback
  *
  * @return  {object}            Promise
  */
	asyncGetMailBody: function asyncGetMailBody(callback) {
		var _this8 = this;

		return new Promise(function (resolve, reject) {
			_this8.mailItem.body.getAsync(Office.CoercionType.Html, function (body) {
				if (body.status === "succeeded") {
					resolve(callback(body.value));
				} else {
					reject(body);
				}
			});
		});
	},

	/**
  * Parse email address details
  *
  * @param   {object}  data
  *
  * @return  {string}        e-mail address
  */
	parseEmailAddressDetails: function parseEmailAddressDetails(data) {
		var fn = function fn(row) {
			return row.emailAddress;
		};
		if ($.isArray(data)) {
			var rows = [];
			$.each(data, function (index, value) {
				rows[index] = fn(value);
			});
			return rows;
		} else {
			return fn(data);
		}
	},

	/**
  * Set iframe height
  */
	setIframeHeight: function setIframeHeight() {
		this.iframe.height($(window).height() - this.iframe.offset().top);
	},

	/**
  * Show iframe loader
  */
	showIframeLoader: function showIframeLoader() {
		this.iframeLoader.progressIndicator(this.loaderParams);
	},

	/**
  * Hide iframe loader
  */
	hideIframeLoader: function hideIframeLoader() {
		this.iframeLoader.progressIndicator({ mode: "hide" });
	},

	/**
  * Init iframe loader
  */
	initIframeLoader: function initIframeLoader() {
		this.iframeLoader = $.progressIndicator(this.loaderParams);
	},

	/**
  * Register modules select
  */
	registerModulesSelect: function registerModulesSelect() {
		var _this9 = this;

		this.moduleSelect = App.Fields.Picklist.showSelect2ElementView(this.container.find(".js-modules"));
		this.moduleSelect.on("change", this.registerModulesSelectChange.bind(this));
		this.container.find(".js-select-record").on("click", function (e) {
			var params = {
				module: _this9.moduleSelect[0].value,
				src_module: "OSSMailView"
			};
			app.showRecordsList(params, function (modal, instance) {
				instance.setSelectEvent(function (responseData, e) {
					_this9.addRelation(responseData.id, params.module);
				});
			});
		});
	},

	/**
  * Register modules select change
  */
	registerModulesSelectChange: function registerModulesSelectChange() {
		if (this.moduleSelect.select2("data")[0].element.dataset.addRecord) {
			this.addRecordBtn.removeClass("d-none");
		} else {
			this.addRecordBtn.addClass("d-none");
		}
	},

	/**
  * Register add record
  */
	registerAddRecord: function registerAddRecord() {
		var _this10 = this;

		this.addRecordBtn.on("click", function (e) {
			var moduleName = _this10.moduleSelect[0].value;
			var callbackFunction = function callbackFunction(_ref) {
				var result = _ref.result;

				_this10.addRelation(result._recordId, moduleName);
			};
			var quickCreateParams = { callbackFunction: callbackFunction };
			_this10.showQuickCreateForm(moduleName, quickCreateParams);
		});
	},

	/**
  * Reload view
  */
	reloadView: function reloadView(condition) {
		if (condition) {
			window.location.reload();
		}
	},

	/**
  * Register events
  */
	registerEvents: function registerEvents() {
		this.container = $("#page");
		this.iframe = $("#js-iframe");
		this.iframeWindow = this.iframe[0].contentWindow;
		this.addRecordBtn = this.container.find(".js-add-record");
		this.mailId = this.container.find(".js-iframe-container").data("mailId");
		this.mailItem = Office.context.mailbox.item;
		if (this.iframe.length) {
			this.registerListItemEvents();
			this.registerIframeEvents();
			this.setIframeHeight();
			if (this.mailId) {
				this.registerModulesSelect();
				this.registerAddRecord();
			} else {
				this.registerImportClick();
			}
		}
	}
};

(function ($) {
	MailIntegration_Iframe.registerEvents();
})($);
//# sourceMappingURL=Iframe.min.js.map
