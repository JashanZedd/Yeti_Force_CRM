'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

Vtiger_List_Js('Vtiger_ListPreview_Js', {}, {
	frameProgress: false,
	/**
  * Sets correct page url.
  * @param {string} url - current url.
  */
	updatePreview: function updatePreview(url) {
		var frame = $('.listPreviewframe');
		this.frameProgress = $.progressIndicator({
			position: 'html',
			message: app.vtranslate('JS_FRAME_IN_PROGRESS'),
			blockInfo: {
				enabled: true
			}
		});
		var defaultView = '';
		if (app.getMainParams('defaultDetailViewName')) {
			defaultView = defaultView + '&mode=showDetailViewByMode&requestMode=' + app.getMainParams('defaultDetailViewName'); // full, summary
		}
		frame.attr('src', url.replace('view=Detail', 'view=DetailPreview') + defaultView);
	},
	/**
  * Registers click events.
  */
	registerRowClickEvent: function registerRowClickEvent() {
		var thisInstance = this;
		var listViewContentDiv = this.getListViewContentContainer();
		listViewContentDiv.on('click', '.listViewEntries', function (e) {
			if ($(e.target).closest('div').hasClass('actions')) return;
			if ($(e.target).is('button') || $(e.target).parent().is('button')) return;
			if ($(e.target).closest('a').hasClass('noLinkBtn')) return;
			if ($(e.target, $(e.currentTarget)).is('td:first-child')) return;
			if ($(e.target).is('input[type="checkbox"]')) return;
			if ($.contains($(e.currentTarget).find('td:last-child').get(0), e.target)) return;
			if ($.contains($(e.currentTarget).find('td:first-child').get(0), e.target)) return;
			var elem = $(e.currentTarget);
			var recordUrl = elem.data('recordurl');
			if (typeof recordUrl === 'undefined') {
				return;
			}
			$('.listViewEntriesTable .listViewEntries').removeClass('active');
			$(this).addClass('active');
			thisInstance.updatePreview(recordUrl);
		});
	},
	/**
  * Registers list events.
  * @param {jQuery} container - current container for reference.
  */
	registerListEvents: function registerListEvents() {
		var _this = this;

		var mainBody = this.container.closest('.mainBody');
		app.showNewScrollbarTopBottomRight(this.list, { wheelPropagation: false });
		this.registerFixedThead();
		this.registerScrollEvent(mainBody);
		this.registerResizeEvent();
		this.list.on('click', '.listViewEntries', function () {
			if (_this.split.getSizes()[1] < 10) {
				var defaultGutterPosition = _this.getDefaultSplitSizes();
				_this.split.setSizes(defaultGutterPosition);
				_this.preview.show();
				_this.sideBlockRight.removeClass('d-block');
				app.moduleCacheSet('userSplitSet', defaultGutterPosition);
			}
		});
	},
	registerScrollEvent: function registerScrollEvent(mainBody) {
		var _this2 = this;

		var scrollContainer = App.Components.Scrollbar.page.element;
		scrollContainer.scrollTop(0); // reset scroll to set correct start position
		var listOffsetTop = this.list.offset().top - this.headerH;
		var initialH = this.sideBlocks.height();
		var mainViewPortHeightCss = { height: mainBody.height() };
		var mainViewPortWidthCss = { width: mainBody.height() };
		this.gutter.addClass('js-fixed-scroll');
		var fixedElements = this.container.find('.js-fixed-scroll');
		var fixedThead = this.list.siblings('.floatThead-container');
		var onScroll = function onScroll() {
			if (scrollContainer.scrollTop() >= listOffsetTop) {
				fixedThead.add(fixedElements).css({ top: scrollContainer.scrollTop() - listOffsetTop });
				fixedElements.css(mainViewPortHeightCss);
				_this2.rotatedText.css(mainViewPortHeightCss);
				_this2.rotatedText.css(mainViewPortWidthCss);
			} else {
				fixedThead.add(fixedElements).css({ top: 'initial' });
				fixedElements.css({ height: initialH + scrollContainer.scrollTop() });
				_this2.rotatedText.css({
					width: initialH + scrollContainer.scrollTop(),
					height: initialH + scrollContainer.scrollTop()
				});
			}
		};
		scrollContainer.on('scroll', onScroll);
	},
	registerResizeEvent: function registerResizeEvent() {
		var _this3 = this;

		$(window).on('resize', function () {
			if (App.Components.Scrollbar.page.element.scrollTop() >= _this3.list.offset().top + $('.commonActionsContainer').height()) {
				_this3.container.find('.gutter').css('left', _this3.preview.offset().left - 8);
			}
		});
	},
	registerFixedThead: function registerFixedThead() {
		var list = this.list;
		this.listFloatThead = list.find('.js-fixed-thead');
		this.listFloatThead.floatThead('destroy');
		this.listFloatThead.floatThead({
			scrollContainer: function scrollContainer() {
				return list;
			}
		});
		this.listFloatThead.floatThead('reflow');
	},

	getSecondColMinWidth: function getSecondColMinWidth(container) {
		var maxWidth = 0,
		    thisWidth = void 0;
		container.find('.listViewEntries').each(function (i) {
			thisWidth = $(this).find('.listViewEntryValue a').first().width();
			if (i === 0) {
				maxWidth = thisWidth;
			} else {
				thisWidth > maxWidth ? maxWidth = thisWidth : maxWidth;
			}
		});
		return maxWidth;
	},
	setDomParams: function setDomParams(container) {
		this.container = container;
		this.listColumnFirstWidth = container.find('.listViewEntriesDiv .listViewHeaders th').first().width();
		this.listColumnSecondWidth = this.getSecondColMinWidth(container);
		this.windowMinWidth = 15 / $(window).width() * 100;
		this.windowMaxWidth = 100 - this.minWidth;
		this.sideBlocks = container.find('.js-side-block');
		this.sideBlockLeft = this.sideBlocks.first();
		this.sideBlockRight = this.sideBlocks.last();
		this.list = container.find('.js-list-preview');
		this.preview = container.find('.js-detail-preview');
		this.rotatedText = container.find('.u-rotate-90');
		this.footerH = $('.js-footer').outerHeight();
		this.headerH = $('.js-header').outerHeight();
	},
	getDefaultSplitSizes: function getDefaultSplitSizes() {
		var thWidth = (this.listColumnFirstWidth + this.listColumnSecondWidth + 82) / $(window).width() * 100;
		return [thWidth, 100 - thWidth];
	},
	/**
  * Sets default windows size or from cache
  * @param {jQuery} container - current container for reference.
  * @return Array
  */
	getSplitSizes: function getSplitSizes() {
		var cachedParams = app.moduleCacheGet('userSplitSet');
		if (cachedParams !== undefined) {
			return cachedParams;
		} else {
			return this.getDefaultSplitSizes();
		}
	},
	/**
  * Registers split's events.
  * @param {jQuery} container - current container for reference.
  * @param {Split} split - a split object.
  */
	registerSplitEvents: function registerSplitEvents(container, split) {
		var _this4 = this;

		var rightSplitMaxWidth = 400 / $(window).width() * 100;
		var minWindowWidth = 25 / $(window).width() * 100;
		var maxWindowWidth = 100 - minWindowWidth;
		var listPreview = container.find('.js-detail-preview');
		this.gutter.on('dblclick', function () {
			var gutterMidPosition = app.moduleCacheGet('gutterMidPosition');
			if (isNaN(_this4.split.getSizes()[0])) {
				_this4.split.setSizes(gutterMidPosition);
			}
			if (split.getSizes()[0] < 10) {
				_this4.sideBlockLeft.removeClass('d-block');
				_this4.list.removeClass('u-hide-underneath');
				if (gutterMidPosition[0] > 11) {
					split.setSizes(gutterMidPosition);
				} else {
					split.setSizes(_this4.getDefaultSplitSizes());
				}
			} else if (split.getSizes()[1] < 20) {
				if (gutterMidPosition[1] > rightSplitMaxWidth + 1) {
					split.setSizes(gutterMidPosition);
				} else {
					split.setSizes(_this4.getDefaultSplitSizes());
				}
				_this4.sideBlockRight.removeClass('d-block');
				listPreview.show();
				_this4.gutter.css('right', 'initial');
			} else if (split.getSizes()[0] > 10 && split.getSizes()[0] < 50) {
				split.setSizes([minWindowWidth, maxWindowWidth]);
				_this4.list.addClass('u-hide-underneath');
				_this4.sideBlockLeft.addClass('d-block');
			} else if (split.getSizes()[1] > 10 && split.getSizes()[1] < 50) {
				split.collapse(1);
				_this4.sideBlockRight.addClass('d-block');
				listPreview.hide();
				_this4.list.width(_this4.list.width() - 10);
			}
			_this4.listFloatThead.floatThead('reflow');
			app.moduleCacheSet('userSplitSet', split.getSizes());
		});
		this.sideBlockLeft.on('click', function () {
			var gutterMidPosition = app.moduleCacheGet('gutterMidPosition');
			if (gutterMidPosition[0] > 11) {
				split.setSizes(gutterMidPosition);
			} else {
				split.setSizes(_this4.getDefaultSplitSizes());
			}
			_this4.sideBlockLeft.removeClass('d-block');
			_this4.list.removeClass('u-hide-underneath');
			_this4.listFloatThead.floatThead('reflow');
			app.moduleCacheSet('userSplitSet', split.getSizes());
		});
		this.sideBlockRight.on('click', function () {
			var gutterMidPosition = app.moduleCacheGet('gutterMidPosition');
			if (gutterMidPosition[1] > rightSplitMaxWidth + 1) {
				split.setSizes(gutterMidPosition);
			} else {
				split.setSizes(_this4.getDefaultSplitSizes());
			}
			_this4.sideBlockRight.removeClass('d-block');
			listPreview.show();
			_this4.gutter.css('right', 'initial');
			_this4.listFloatThead.floatThead('reflow');
			app.moduleCacheSet('userSplitSet', split.getSizes());
		});
	},
	/**
  * Registers split object and executes its events listeners.
  * @param {jQuery} container - current container for reference.
  * @returns {Split} A split object.
  */
	registerSplit: function registerSplit(container) {
		var _this5 = this;

		var rightSplitMaxWidth = 400 / $(window).width() * 100;
		var splitMinWidth = 25 / $(window).width() * 100;
		var splitMaxWidth = 100 - splitMinWidth;
		var listPreview = container.find('.js-detail-preview');
		var splitSizes = this.getSplitSizes();
		var split = Split([this.list[0], listPreview[0]], {
			sizes: splitSizes,
			minSize: 10,
			gutterSize: 24,
			snapOffset: 100,
			onDrag: function onDrag() {
				if (split.getSizes()[1] < rightSplitMaxWidth) {
					split.collapse(1);
				}
				if (split.getSizes()[0] < 5) {
					_this5.sideBlockLeft.addClass('d-block');
					_this5.list.addClass('u-hide-underneath');
				} else {
					_this5.sideBlockLeft.removeClass('d-block');
					_this5.list.removeClass('u-hide-underneath');
				}
				if (split.getSizes()[1] < 10) {
					_this5.sideBlockRight.addClass('d-block');
					listPreview.hide();
					_this5.list.width(_this5.list.width() - 10);
				} else {
					_this5.sideBlockRight.removeClass('d-block');
					listPreview.show();
				}
				if (split.getSizes()[0] > 10 && split.getSizes()[1] > rightSplitMaxWidth) {
					_this5.listFloatThead.floatThead('reflow');
					app.moduleCacheSet('gutterMidPosition', split.getSizes());
				}
				app.moduleCacheSet('userSplitSet', split.getSizes());
			},
			onDragStart: function onDragStart() {
				listPreview.css('z-index', '1001');
				_this5.gutter.css('z-index', '1001');
			},
			onDragEnd: function onDragEnd() {
				listPreview.css('z-index', '0');
				_this5.gutter.css('z-index', '0');
				_this5.listFloatThead.floatThead('reflow');
			}
		});
		if (splitSizes[0] < 10) {
			listPreview.width(listPreview.width() - 150);
			this.sideBlockLeft.addClass('d-block');
			split.setSizes([splitMinWidth, splitMaxWidth]);
			this.list.addClass('u-hide-underneath');
		} else if (splitSizes[1] < rightSplitMaxWidth) {
			this.sideBlockRight.addClass('d-block');
			listPreview.hide();
			split.setSizes([splitMaxWidth, splitMinWidth]);
		}
		this.gutter = container.find('.gutter');
		var mainWindowHeightCss = { height: $(window).height() - (this.gutter.offset().top + this.footerH) };
		this.gutter.css(mainWindowHeightCss);
		this.list.css(mainWindowHeightCss);
		this.sideBlocks.css(mainWindowHeightCss);
		this.registerSplitEvents(container, split);
		this.rotatedText.first().find('.js-list-name').append($('.breadcrumbsContainer .js-text-content').text());
		this.rotatedText.css({
			width: this.sideBlockLeft.height(),
			height: this.sideBlockLeft.height()
		});
		return split;
	},
	/**
  * Adds the split and deletes it on resize.
  * @param {jQuery} container - current container for reference.
  */
	toggleSplit: function toggleSplit(container) {
		var _this6 = this;

		var thisInstance = this;
		var listPreview = container.find('.js-detail-preview');
		var splitsArray = [];
		var mainBody = container.closest('.mainBody');
		if ($(window).width() > 993 && !container.find('.gutter').length) {
			this.split = thisInstance.registerSplit(container);
			splitsArray.push(this.split);
		}
		$(window).on('resize', function () {
			if ($(window).width() < 993) {
				if (container.find('.gutter').length) {
					splitsArray[splitsArray.length - 1].destroy();
					_this6.sideBlockRight.removeClass('d-block');
					_this6.sideBlockLeft.removeClass('d-block');
				}
			} else {
				if (container.find('.gutter').length !== 1) {
					_this6.split = thisInstance.registerSplit(container);

					_this6.gutter = container.find('.gutter');
					_this6.gutter.addClass('js-fixed-scroll');
					if (mainBody.scrollTop() >= _this6.list.offset().top) {
						gutter.addClass('gutterOnScroll');
						gutter.css('left', listPreview.offset().left - 8);
						gutter.on('mousedown', function () {
							$(this).on('mousemove', function (e) {
								$(this).css('left', listPreview.offset().left - 8);
							});
						});
					}
					splitsArray.push(_this6.split);
				}
				var currentSplit = splitsArray[splitsArray.length - 1];
				if (typeof currentSplit === 'undefined') return;
				if (currentSplit.getSizes()[0] < _this6.windowMinWidth + 5) {
					currentSplit.setSizes([_this6.windowMinWidth, _this6.windowMaxWidth]);
				} else if (currentSplit.getSizes()[1] < _this6.windowMinWidth + 5) {
					currentSplit.setSizes([_this6.windowMaxWidth, _this6.windowMinWidth]);
				}
			}
		});
	},
	/**
  * @inheritDoc
  */
	registerDesktopEvents: function registerDesktopEvents() {},

	/**
  * Sets initial iframe's height and fills the preview with first record's content.
  */
	registerPreviewEvent: function registerPreviewEvent() {
		var _this7 = this;

		var iframe = $('.listPreviewframe');
		var container = this.getListViewContentContainer();
		this.setDomParams(container);
		this.toggleSplit(container);
		if ($(window).width() > 993) {
			this.registerListEvents(container);
		}
		iframe.on('load', function () {
			_this7.frameProgress.progressIndicator({ mode: 'hide' });
			iframe.height(iframe.contents().find('.bodyContents').height() - 20);
		});
		$('.listViewEntriesTable .listViewEntries').first().trigger('click');
	},
	/**
  * Sets the correct parent iframe's size.
  * @param {jQuery} currentHeight - ifrmae's body height to be set.
  * @param {jQuery} frame - ifrmae's height to be changed.
  */
	updateWindowHeight: function updateWindowHeight(height, frame) {
		frame.height(height);
	},
	/**
  * Executes event listener.
  * @param {jQuery} container - current container for reference.
  */
	postLoadListViewRecordsEvents: function postLoadListViewRecordsEvents(container) {
		this._super(container);
		this.registerPreviewEvent();
	},
	/**
  * Registers ListPreview's events.
  */
	registerEvents: function registerEvents() {
		this._super();
		this.registerPreviewEvent();
	}
});
//# sourceMappingURL=ListPreview.min.js.map
