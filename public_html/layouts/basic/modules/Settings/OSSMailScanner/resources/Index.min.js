'use strict';

/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */

jQuery.Class('Settings_OSSMailScanner_Index_Js', {}, {
	registerColorField: function registerColorField(field) {
		var params = {};
		params.tags = true;
		params.templateSelection = function (object) {
			var selectedId = object.id,
			    tabValue = selectedId.split('@'),
			    state = object.text;
			if (!tabValue[0]) {
				state = $('<span class="domain">' + object.text + '</span>');
			}
			return state;
		};
		App.Fields.Picklist.showSelect2ElementView(field, params);
	},
	registerEditFolders: function registerEditFolders(container) {
		var self = this;
		container.find('.editFolders').on('click', function () {
			var url = 'index.php?module=OSSMailScanner&parent=Settings&view=Folders' + '&record=' + $(this).data('user'),
			    progressIndicatorElement = jQuery.progressIndicator({
				message: app.vtranslate('LBL_LOADING_LIST_OF_FOLDERS'),
				position: 'html',
				blockInfo: {
					enabled: true
				}
			});
			app.showModalWindow('', url, function (data) {
				progressIndicatorElement.progressIndicator({ mode: 'hide' });
				var recurrenceTree = new App.Components.Tree.Basic();
				data.find('[name="saveButton"]').on('click', function (e) {
					var selectedFolders = self.getSelectedFolders(recurrenceTree.treeInstance);
					AppConnector.request({
						module: 'OSSMailScanner',
						parent: 'Settings',
						action: 'SaveAjax',
						mode: 'updateFolders',
						user: data.find('.modal-body').data('user'),
						folders: selectedFolders
					}).done(function (data) {
						var response = data['result'],
						    emptyFoldersAlert = $('.js-empty-folders-alert'),
						    messageType = 'info';
						if (!response['success']) {
							messageType = 'error';
						}
						Vtiger_Helper_Js.showPnotify({
							text: response['message'],
							type: messageType
						});
						if (Object.keys(selectedFolders).length) {
							emptyFoldersAlert.addClass('d-none');
						} else {
							emptyFoldersAlert.removeClass('d-none');
						}
						app.hideModalWindow();
					});
				});
			});
		});
	},
	getSelectedFolders: function getSelectedFolders(treeInstance) {
		console.log(treeInstance.jstree('get_selected', true));
		var folders = {};
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = treeInstance.jstree('get_selected', true)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var value = _step.value;

				if (!Array.isArray(folders[value.original.db_type])) {
					folders[value.original.db_type] = [];
				}
				if (value.original.db_id !== undefined) {
					folders[value.original.db_type].push(value.original.db_id);
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		return folders;
	},

	registerEvents: function registerEvents() {
		var thisIstance = this,
		    container = jQuery('.contentsDiv');
		thisIstance.registerColorField($('#exceptions select'));
		thisIstance.registerEditFolders(container);
		$('#exceptions select').on('select2:select', function (e) {
			var value = e.params.data.id;
			if (!!thisIstance.domainValidateToExceptions(value) || !!thisIstance.email_validate(value)) {
				thisIstance.saveWidgetConfig(jQuery(this).attr('name'), jQuery(this).val().join(), 'exceptions');
				thisIstance.registerColorField(jQuery(this));
			} else {
				jQuery(this).find("option[value='" + value + "']").remove();
				jQuery(this).trigger('change');
				Vtiger_Helper_Js.showPnotify({
					text: app.vtranslate('JS_mail_error'),
					type: 'error'
				});
			}
		}).on('select2:unselect', function () {
			thisIstance.saveWidgetConfig(jQuery(this).attr('name'), jQuery(this).val(), 'exceptions');
		});

		$('#status').on('change', function () {
			$('#confirm').attr('disabled', !this.checked);
		});

		jQuery('.conftabChangeTicketStatus').on('click', function () {
			if ($(this).data('active') == '1') {
				return false;
			}
			$('.conftabChangeTicketStatus').data('active', 0);
			$(this).data('active', 1);
			AppConnector.request({
				async: true,
				data: {
					module: 'OSSMailScanner',
					action: 'SaveRcConfig',
					ct: 'emailsearch',
					type: 'changeTicketStatus',
					vale: $(this).val()
				}
			}).done(function (data) {
				if (data.success) {
					Vtiger_Helper_Js.showPnotify({
						text: data.result.data,
						type: 'info'
					});
				}
			}, function (data, err) {});
		});

		jQuery('.delate_accont').on('click', function () {
			if (window.confirm(app.vtranslate('whether_remove_an_identity'))) {
				var userId = jQuery(this).data('user-id');
				AppConnector.request({
					data: { module: 'OSSMailScanner', action: 'AccontRemove', id: userId },
					async: true
				}).done(function (data) {
					Vtiger_Helper_Js.showPnotify({
						text: data.result.data,
						type: 'info'
					});
					jQuery('#row_account_' + userId).hide();
				});
			}
		});
		jQuery('.identities_del').on('click', function () {
			var button = this;
			if (window.confirm(app.vtranslate('whether_remove_an_identity'))) {
				AppConnector.request({
					data: { module: 'OSSMailScanner', action: 'IdentitiesDel', id: jQuery(this).data('id') },
					async: true
				}).done(function () {
					Vtiger_Helper_Js.showPnotify({
						text: app.vtranslate('removed_identity'),
						type: 'info'
					});
					jQuery(button).parent().parent().remove();
				}, function (data, err) {});
			}
		});

		jQuery('.expand-hide').on('click', function () {
			var userId = jQuery(this).data('user-id'),
			    tr = jQuery('tr[data-user-id="' + userId + '"]');

			if ('none' == tr.css('display')) {
				tr.show();
			} else {
				tr.hide();
			}
		});
		$('.alert').alert();
		jQuery("select[id^='function_list_']").on('change', function () {
			thisIstance.saveActions(jQuery(this).data('user-id'), jQuery(this).val());
		});
		jQuery("select[id^='user_list_']").on('change', function () {
			thisIstance.saveCRMuser(jQuery(this).data('user'), jQuery(this).val());
		});
		jQuery('#email_search').on('change', function () {
			thisIstance.saveEmailSearchList(jQuery('#email_search').val());
		});
		jQuery('#tab_email_view_widget_limit').on('blur', function () {
			thisIstance.saveWidgetConfig('widget_limit', jQuery(this).val(), 'email_list');
		});
		jQuery('#tab_email_view_open_window').on('change', function () {
			thisIstance.saveWidgetConfig('target', jQuery(this).val(), 'email_list');
		});
		jQuery('[name="email_to_notify"]').on('blur', function () {
			var value = jQuery(this).val();
			if (!!thisIstance.email_validate(value)) {
				thisIstance.saveWidgetConfig('email', value, 'cron');
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: app.vtranslate('JS_mail_error'),
					type: 'error'
				});
			}
		});
		jQuery('[name="time_to_notify"]').on('blur', function () {
			var value = jQuery(this).val();
			if (!!thisIstance.number_validate(value)) {
				thisIstance.saveWidgetConfig('time', jQuery(this).val(), 'cron');
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: app.vtranslate('JS_time_error'),
					type: 'error'
				});
			}
		});
		container.find('.js-page-num').on('change', function () {
			thisIstance.reloadLogTable($(this).val() - 1);
		});
		container.find('.js-run-cron').on('click', function () {
			var buttonInstance = $(this);
			Vtiger_Helper_Js.showPnotify({
				text: app.vtranslate('start_cron'),
				type: 'info',
				animation: 'show'
			});
			buttonInstance.attr('disabled', true);
			var ajaxParams = {};
			ajaxParams.data = { module: 'OSSMailScanner', action: 'Cron' };
			ajaxParams.async = true;
			AppConnector.request(ajaxParams).done(function (data) {
				var params = {};
				if (data.success && 'ok' === data.result) {
					params = {
						text: app.vtranslate('end_cron_ok'),
						type: 'info',
						animation: 'show'
					};
				} else {
					params = {
						title: app.vtranslate('end_cron_error'),
						text: data.result,
						type: 'error',
						animation: 'show'
					};
				}
				Vtiger_Helper_Js.showPnotify(params);
				buttonInstance.attr('disabled', false);
				thisIstance.reloadLogTable(container.find('.js-page-num').val() - 1);
			});
		});
		container.on('click', '.js-stop-cron', function (e) {
			var ajaxParams = {},
			    scanId = $(e.currentTarget).data('scan-id');
			ajaxParams.data = { module: 'OSSMailScanner', action: 'RestartCron', scanId: scanId };
			ajaxParams.async = true;
			AppConnector.request(ajaxParams).done(function (data) {
				if (data.success) {
					Vtiger_Helper_Js.showPnotify({
						text: data.result.data,
						type: 'info',
						animation: 'show'
					});
					container.find('.js-run-cron').attr('disabled', false);
				}
			});
			thisIstance.reloadLogTable(container.find('.js-page-num').val() - 1);
		});
	},
	saveActions: function saveActions(userid, vale) {
		AppConnector.request({
			module: 'OSSMailScanner',
			action: 'SaveActions',
			userid: userid,
			vale: vale
		}).done(function (data) {
			var response = data['result'];
			if (response['success']) {
				Vtiger_Helper_Js.showPnotify({
					text: response['data'],
					type: 'info'
				});
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: response['data']
				});
			}
		});
	},
	saveCRMuser: function saveCRMuser(userid, value) {
		AppConnector.request({
			module: 'OSSMailScanner',
			action: 'SaveCRMuser',
			userid: userid,
			value: value
		}).done(function (data) {
			var response = data['result'];
			if (response['success']) {
				Vtiger_Helper_Js.showPnotify({
					text: response['data'],
					type: 'info'
				});
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: response['data']
				});
			}
		});
	},
	isEmpty: function isEmpty(val) {
		if (!!val || val === 0) {
			return val;
		}
		return '';
	},
	saveEmailSearchList: function saveEmailSearchList(vale) {
		AppConnector.request({
			module: 'OSSMailScanner',
			action: 'SaveEmailSearchList',
			vale: vale
		}).done(function (data) {
			var response = data['result'];
			if (response['success']) {
				Vtiger_Helper_Js.showPnotify({
					text: response['data'],
					type: 'info'
				});
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: response['data']
				});
			}
		});
	},
	domainValidateToExceptions: function domainValidateToExceptions(src) {
		var regex = /^@([a-zA-Z0-9.-]+\.)+[a-zA-Z0-9.-]{2,63}$/;
		return regex.test(src);
	},
	email_validate: function email_validate(src) {
		var regex = /^[a-zA-Z0-9._-]+@([a-zA-Z0-9.-]+\.)+[a-zA-Z0-9.-]{2,63}$/;
		return regex.test(src);
	},
	number_validate: function number_validate(value) {
		var valid = !/^\s*$/.test(value) && !isNaN(value);
		return valid;
	},
	saveWidgetConfig: function saveWidgetConfig(name, value, type) {
		AppConnector.request({
			module: 'OSSMailScanner',
			action: 'SaveWidgetConfig',
			conf_type: type,
			name: name,
			value: value
		}).done(function (data) {
			var response = data['result'];
			if (response['success']) {
				Vtiger_Helper_Js.showPnotify({
					text: response['data'],
					type: 'info'
				});
			} else {
				Vtiger_Helper_Js.showPnotify({
					text: response['data']
				});
			}
		});
	},
	/**
  * Function to reload table with given data from request
  * @param {int} page
  */
	reloadLogTable: function reloadLogTable(page) {
		var self = this;
		var container = $('.contentsDiv'),
		    limit = 30;
		AppConnector.request({
			module: 'OSSMailScanner',
			action: 'GetLog',
			start_number: page * limit
		}).done(function (data) {
			if (data.success) {
				var tab = container.find('table.js-log-list');
				tab.find('tbody tr').remove();
				for (var i = 0; i < data.result.length; i++) {
					var html = '<tr>' + '<td class="p-1">' + self.isEmpty(data.result[i]['id']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['start_time']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['end_time']) + '</td>' + '<td class="p-1">' + self.isEmpty(app.vtranslate(data.result[i]['status'])) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['user']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['count']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['stop_user']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['action']) + '</td>' + '<td class="p-1">' + self.isEmpty(data.result[i]['info']) + '</td><td>';
					if (data.result[i]['status'] === 'In progress') {
						html += '<button type="button" class="btn btn-danger js-stop-cron" data-scan-id="' + data.result[i]['id'] + '"';
						if (container.find('.js-run-cron').data('button-status')) {
							html += ' disabled';
						}
						html += '>' + app.vtranslate('JS_StopCron') + '</button>';
					}
					html += '</td></tr>';
					tab.append(html);
				}
			}
		});
	}
});
//# sourceMappingURL=Index.min.js.map
