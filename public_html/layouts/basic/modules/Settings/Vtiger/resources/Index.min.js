'use strict';

/*+***********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 * Contributor(s): YetiForce.com
 *************************************************************************************/

$.Class('Settings_Vtiger_Index_Js', {
	showMessage: function showMessage(customParams) {
		var params = {
			type: 'success',
			title: app.vtranslate('JS_MESSAGE')
		};
		if (typeof customParams !== 'undefined') {
			params = $.extend(params, customParams);
		}
		Vtiger_Helper_Js.showPnotify(params);
	},
	selectIcon: function selectIcon() {
		var _this = this;

		var aDeferred = $.Deferred();
		app.showModalWindow({
			id: 'iconsModal',
			url: 'index.php?module=Vtiger&view=IconsModal&parent=Settings',
			cb: function cb(container) {
				_this.registerIconsSelect(container);
				container.find('[name="saveButton"]').on('click', function (e) {
					aDeferred.resolve({
						type: container.find('#iconType').val(),
						name: container.find('#iconName').val()
					});
					app.hideModalWindow(container, 'iconsModal');
				});
			}
		});
		return aDeferred.promise();
	},
	registerIconsSelect: function registerIconsSelect(container) {
		var params = { module: app.getModuleName(), parent: app.getParentModuleName(), action: 'Icons' };
		AppConnector.request(params).done(function (_ref) {
			var result = _ref.result;

			var id = 0;
			var data = Object.keys(result).map(function (key) {
				if (key.startsWith('img-')) {
					return { id: id++, text: key.slice(4), key: key, url: result[key], type: 'image' };
				}
				return { id: id++, text: result[key], key: key, type: 'icon' };
			});
			var selectParams = {
				templateSelection: function templateSelection(data) {
					if (!data.id) {
						return data.text;
					}
					container.find('.iconName').text(data.text);
					container.find('#iconName').val(data.text);
					container.find('#iconType').val(data.type);
					if (data.type === 'icon') {
						container.find('.iconExample').html('<span class="' + data.text + '" aria-hidden="true"></span>');
						return $('<span class="' + data.text + '" aria-hidden="true"></span><span> - ' + data.text + '</span>');
					} else if (data.type === 'image') {
						container.find('.iconName').text(data.text);
						container.find('#iconName').val(data.text);
						container.find('.iconExample').html('<img width="24px" src="' + data.url + '"/>');
					}
					return data.text;
				},
				templateResult: function templateResult(data) {
					if (data.loading) {
						return data.text;
					}
					var option = void 0;
					if (data.type === 'icon') {
						option = $('<span class="' + data.text + '" aria-hidden="true"></span><span> - ' + data.text + '</span>');
					} else if (data.type === 'image') {
						option = $('<img width="24px" src="' + data.url + '" title="' + data.text + '" /><span> - ' + data.text + '</span>');
					}
					return option;
				},
				closeOnSelect: true
			};
			var params = { lazyElements: 50, data: data, selectParams: selectParams };
			App.Fields.Picklist.showLazySelect(container.find('#iconsList'), params);
		});
	},

	showWarnings: function showWarnings() {
		$('li[data-mode="systemWarnings"] a').click();
	},
	showSecurity: function showSecurity() {
		app.openUrl('index.php?module=Log&parent=' + app.getParentModuleName() + '&view=Index&type=access_for_admin');
	}
}, {
	registerDeleteShortCutEvent: function registerDeleteShortCutEvent() {
		var _this2 = this;

		var shortcutsContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $('.js-shortcuts');

		shortcutsContainer.on('click', '.unpin', function (e) {
			e.preventDefault();
			var actionEle = $(e.currentTarget);
			var closestBlock = actionEle.closest('.js-shortcut');
			var fieldId = actionEle.data('id');
			var shortcutBlockActionUrl = closestBlock.data('actionurl');
			var actionUrl = shortcutBlockActionUrl + '&pin=false';
			var progressIndicatorElement = $.progressIndicator({
				blockInfo: {
					enabled: true
				}
			});
			AppConnector.request(actionUrl).done(function (data) {
				if (data.result.SUCCESS == 'OK') {
					closestBlock.remove();
					var menuItemId = '#' + fieldId + '_menuItem';
					var shortCutActionEle = $(menuItemId);
					var imagePath = shortCutActionEle.data('pinimageurl');
					shortCutActionEle.attr('src', imagePath).data('action', 'pin');
					_this2.updateShortcutsStorage(shortcutsContainer);
					progressIndicatorElement.progressIndicator({
						mode: 'hide'
					});
					var params = {
						title: app.vtranslate('JS_MESSAGE'),
						text: app.vtranslate('JS_SUCCESSFULLY_UNPINNED'),
						type: 'info'
					};
					Vtiger_Helper_Js.showPnotify(params);
				}
			});
		});
	},
	registerPinShortCutEvent: function registerPinShortCutEvent(element) {
		var _this3 = this;

		var id = element.data('id');
		var url = 'index.php?module=Vtiger&parent=Settings&action=Basic&mode=updateFieldPinnedStatus&pin=true&fieldid=' + id;
		var progressIndicatorElement = $.progressIndicator({
			blockInfo: {
				enabled: true
			}
		});
		AppConnector.request(url).done(function (data) {
			if (data.result.SUCCESS == 'OK') {
				AppConnector.request({
					fieldid: id,
					mode: 'getSettingsShortCutBlock',
					module: 'Vtiger',
					parent: 'Settings',
					view: 'IndexAjax'
				}).done(function (data) {
					var shortcutsContainer = $('.js-shortcuts');
					$(data).appendTo(shortcutsContainer);
					_this3.updateShortcutsStorage(shortcutsContainer);
					progressIndicatorElement.progressIndicator({
						mode: 'hide'
					});
					Settings_Vtiger_Index_Js.showMessage({
						text: app.vtranslate('JS_SUCCESSFULLY_PINNED')
					});
				});
			}
		});
	},
	registerWidgetsEvents: function registerWidgetsEvents() {
		var widgets = $('div.widgetContainer');
		widgets.on('shown.bs.collapse', function (e) {
			var widgetContainer = $(e.currentTarget);
			var quickWidgetHeader = widgetContainer.closest('.quickWidget').find('.quickWidgetHeader');
			var imageEle = quickWidgetHeader.find('.imageElement');
			var imagePath = imageEle.data('downimage');
			imageEle.attr('src', imagePath);
		});
		widgets.on('hidden.bs.collapse', function (e) {
			var widgetContainer = $(e.currentTarget);
			var quickWidgetHeader = widgetContainer.closest('.quickWidget').find('.quickWidgetHeader');
			var imageEle = quickWidgetHeader.find('.imageElement');
			var imagePath = imageEle.data('rightimage');
			imageEle.attr('src', imagePath);
		});
	},
	registerAddShortcutDragDropEvent: function registerAddShortcutDragDropEvent() {
		var elements = $('.js-menu__item .js-menu__link--draggable');
		var self = this;
		var classes = 'ui-draggable-menuShortcut bg-warning';
		elements.draggable({
			containment: '#page',
			appendTo: 'body',
			helper: 'clone',
			start: function start(e, ui) {
				$(ui.helper).addClass(classes);
			},
			zIndex: 99999
		});
		var shortcutsContainer = $('.js-shortcuts');
		shortcutsContainer.droppable({
			activeClass: 'ui-state-default',
			hoverClass: 'ui-state-hover',
			accept: '.js-menu__item .js-menu__link--draggable',
			drop: function drop(event, ui) {
				var url = ui.draggable.attr('href');
				var isExist = false;
				$('.js-shortcuts [id^="shortcut"]').each(function () {
					var shortCutUrl = $(this).data('url');
					if (shortCutUrl == url) {
						isExist = true;
						return;
					}
				});
				if (isExist) {
					var params = {
						title: app.vtranslate('JS_MESSAGE'),
						text: app.vtranslate('JS_SHORTCUT_ALREADY_ADDED'),
						type: 'info'
					};
					Vtiger_Helper_Js.showPnotify(params);
				} else {
					self.registerPinShortCutEvent(ui.draggable.parent());
				}
			}
		});
		shortcutsContainer.sortable({
			handle: '.js-drag-handler',
			stop: function stop(event, element) {
				self.updateShortcutsStorage(shortcutsContainer);
			}
		});
		if (Quasar.plugins.LocalStorage.has('yf-settings-shortcuts')) {
			this.alignShortcuts(shortcutsContainer);
		}
	},
	alignShortcuts: function alignShortcuts(container) {
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = Quasar.plugins.LocalStorage.getItem('yf-settings-shortcuts')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var item = _step.value;

				container.append(container.find('#' + item));
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	},
	updateShortcutsStorage: function updateShortcutsStorage(container) {
		Quasar.plugins.LocalStorage.set('yf-settings-shortcuts', container.sortable('toArray'));
	},
	registerCollapsiblePanels: function registerCollapsiblePanels() {
		var _this4 = this;

		var panels = this.container.find('.js-collapse');
		if (Quasar.plugins.LocalStorage.has('yf-settings-panels')) {
			this.setPanels(panels);
		} else {
			panels.collapse('show');
			Quasar.plugins.LocalStorage.set('yf-settings-panels', {
				'marketplace-collapse': 'shown',
				'system-monitoring-collapse': 'shown',
				'my-shortcuts-collapse': 'shown'
			});
		}
		panels.on('hidden.bs.collapse shown.bs.collapse', function (e) {
			_this4.updatePanelsStorage(e.target.id, e.type);
		});
	},
	updatePanelsStorage: function updatePanelsStorage(id, type) {
		var panelsStorage = Quasar.plugins.LocalStorage.getItem('yf-settings-panels');
		panelsStorage[id] = type;
		Quasar.plugins.LocalStorage.set('yf-settings-panels', panelsStorage);
	},
	setPanels: function setPanels(panels) {
		var panelsStorage = Quasar.plugins.LocalStorage.getItem('yf-settings-panels');
		panels.each(function (i, item) {
			if (panelsStorage[item.id] === 'shown') {
				$(item).collapse('show');
			}
		});
	},

	loadEditorElement: function loadEditorElement() {
		new App.Fields.Text.Editor($('.js-editor'), {});
	},
	registerSaveIssues: function registerSaveIssues() {
		var container = $('.addIssuesModal');
		container.validationEngine(app.validationEngineOptions);
		var title = $('#titleIssues');
		var CKEditorInstance = CKEDITOR.instances['bodyIssues'];
		var thisInstance = this;
		var saveBtn = container.find('.saveIssues');
		saveBtn.on('click', function () {
			if (container.validationEngine('validate')) {
				var body = CKEditorInstance.document.getBody().getHtml();
				var params = {
					module: 'Github',
					parent: app.getParentModuleName(),
					action: 'SaveIssuesAjax',
					title: title.val(),
					body: body
				};
				AppConnector.request(params).done(function (data) {
					app.hideModalWindow();
					thisInstance.reloadContent();
					if (data.result.success == true) {
						var params = {
							title: app.vtranslate('JS_LBL_PERMISSION'),
							text: app.vtranslate('JS_ADDED_ISSUE_COMPLETE'),
							type: 'success'
						};
						Vtiger_Helper_Js.showMessage(params);
					}
				});
			}
		});
		$('[name="confirmRegulations"]').on('click', function () {
			var currentTarget = $(this);
			if (currentTarget.is(':checked')) {
				saveBtn.removeAttr('disabled');
			} else {
				saveBtn.attr('disabled', 'disabled');
			}
		});
	},
	reloadContent: function reloadContent() {
		$('.js-tabs li .active').trigger('click');
	},
	registerTabEvents: function registerTabEvents() {
		var thisInstance = this;
		$('.js-tabs li').on('click', function () {
			thisInstance.loadContent($(this).data('mode'), false, $(this).data('params'));
		});
	},
	registerWarningsAlert: function registerWarningsAlert() {
		var alertsContainer = $('#systemWarningAletrs');
		if (alertsContainer.length) {
			app.showModalWindow(alertsContainer, function () {
				alertsContainer.find('.warning').first().removeClass('d-none');
				alertsContainer.find('.warning .btn').on('click', function (e) {
					var btn = $(this),
					    save = true,
					    params = void 0;
					if (btn.hasClass('ajaxBtn')) {
						if (btn.data('params') === undefined) {
							var form = btn.closest('form');
							if (form.hasClass('validateForm') && !form.validationEngine('validate')) {
								save = false;
							}
							params = btn.closest('form').serializeArray().reduce(function (obj, item) {
								obj[item.name] = item.value;
								return obj;
							}, {});
						} else {
							params = btn.data('params');
						}
						if (save) {
							AppConnector.request({
								module: app.getModuleName(),
								parent: app.getParentModuleName(),
								action: 'SystemWarnings',
								mode: 'update',
								id: btn.closest('.warning').data('id'),
								params: params
							}).done(function (data) {
								if (data.result.result) {
									Vtiger_Helper_Js.showMessage({ text: data.result.message, type: 'success' });
								} else {
									Vtiger_Helper_Js.showMessage({ text: data.result.message, type: 'error' });
								}
							});
						}
					}
					if (btn.hasClass('cancel')) {
						AppConnector.request({
							module: app.getModuleName(),
							parent: app.getParentModuleName(),
							action: 'SystemWarnings',
							mode: 'cancel'
						});
					}
					if (save) {
						alertsContainer.find('.warning').first().remove();
						if (alertsContainer.find('.warning').length) {
							alertsContainer.find('.warning').first().removeClass('d-none');
						} else {
							app.hideModalWindow(alertsContainer);
						}
					}
				});
				alertsContainer.find('.input-group-addon input[type="checkbox"]').on('click', function (e) {
					var btn = $(this),
					    group = btn.closest('.input-group');
					if (this.checked) {
						group.find('input[type="text"]').attr('disabled', false);
					} else {
						group.find('input[type="text"]').attr('disabled', true);
					}
				});
			});
		}
	},
	getSelectedFolders: function getSelectedFolders() {
		var selected = [];
		$.each($('#jstreeContainer').jstree('get_selected', true), function (index, value) {
			selected.push(value.original.subPath);
		});
		return selected;
	},
	loadContent: function loadContent(mode, page, modeParams) {
		var thisInstance = this;
		var container = $('.indexContainer');
		var state = container.find('.js-switch--state');
		var author = container.find('.js-switch--author');
		var params = {
			mode: mode,
			module: app.getModuleName(),
			parent: app.getParentModuleName(),
			view: app.getViewName()
		};
		if (page) {
			params.page = page;
		}
		if (modeParams) {
			params.params = modeParams;
		}
		if (state.last().is(':checked')) {
			params.state = 'closed';
		} else {
			params.state = 'open';
		}
		params.author = author.first().is(':checked');
		var progressIndicatorElement = $.progressIndicator({
			position: 'html',
			blockInfo: {
				enabled: true,
				elementToBlock: container
			}
		});
		AppConnector.request(params).done(function (data) {
			progressIndicatorElement.progressIndicator({ mode: 'hide' });
			container.html(data);
			thisInstance.registerEventsLoadContent(thisInstance, mode, container);
		});
	},
	registerEventsLoadContent: function registerEventsLoadContent(thisInstance, mode, container) {
		if (mode == 'index') {
			thisInstance.registerWidgetsEvents();
			thisInstance.registerDeleteShortCutEvent();
			thisInstance.registerAddShortcutDragDropEvent();
			thisInstance.registerWarningsAlert();
		}
	},
	registerEvents: function registerEvents() {
		this.container = $('.js-dashboard-container');
		this.registerTabEvents();
		this.reloadContent();
		this.registerWarningsAlert();
		this.registerDeleteShortCutEvent();
		this.registerAddShortcutDragDropEvent();
		this.registerCollapsiblePanels();
		new window.Settings_YetiForce_Shop_Js().registerEvents();
	}
});
//# sourceMappingURL=Index.min.js.map
