'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/*+***********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 * Contributor(s): YetiForce.com
 *************************************************************************************/

var CustomView = function () {
	function CustomView(url) {
		var _this = this;

		classCallCheck(this, CustomView);

		var progressIndicatorElement = $.progressIndicator();
		app.showModalWindow(null, url, function () {
			_this.contentsCotainer = $('.js-filter-modal__container');
			_this.advanceFilterInstance = new Vtiger_ConditionBuilder_Js(_this.contentsCotainer.find('.js-condition-builder'), _this.contentsCotainer.find('#sourceModule').val());
			_this.advanceFilterInstance.registerEvents();
			//This will store the columns selection container
			_this.columnSelectElement = false;
			_this.registerEvents();
			progressIndicatorElement.progressIndicator({ mode: 'hide' });
		});
	}

	createClass(CustomView, [{
		key: 'loadDateFilterValues',
		value: function loadDateFilterValues() {
			var selectedDateFilter = $('#standardDateFilter option:selected');
			var currentDate = selectedDateFilter.data('currentdate');
			var endDate = selectedDateFilter.data('enddate');
			$('#standardFilterCurrentDate').val(currentDate);
			$('#standardFilterEndDate').val(endDate);
		}

		/**
   * Function to get the contents container
   * @return : jQuery object of contents container
   */

	}, {
		key: 'getContentsContainer',
		value: function getContentsContainer() {
			if (this.contentsCotainer == false) {
				this.contentsCotainer = $('.js-filter-modal__container');
			}
			return this.contentsCotainer;
		}

		/**
   * Function to get the view columns selection element
   * @return : jQuery object of view columns selection element
   */

	}, {
		key: 'getColumnSelectElement',
		value: function getColumnSelectElement() {
			if (this.columnSelectElement == false) {
				this.columnSelectElement = $('#viewColumnsSelect');
			}
			return this.columnSelectElement;
		}

		/**
   * Function which will get the selected columns
   * @return : array of selected values
   */

	}, {
		key: 'getSelectedColumns',
		value: function getSelectedColumns() {
			var columnListSelectElement = this.getColumnSelectElement();
			return columnListSelectElement.val();
		}
	}, {
		key: 'saveFilter',
		value: function saveFilter() {
			var aDeferred = $.Deferred();
			var formData = $('#CustomView').serializeFormData();
			AppConnector.request(formData, true).done(function (data) {
				aDeferred.resolve(data);
			}).fail(function (error) {
				aDeferred.reject(error);
			});
			return aDeferred.promise();
		}
	}, {
		key: 'saveAndViewFilter',
		value: function saveAndViewFilter() {
			this.saveFilter().done(function (data) {
				var response = data.result;
				if (response && response.success) {
					var url = void 0;
					if (app.getParentModuleName() == 'Settings') {
						url = 'index.php?module=CustomView&parent=Settings&view=Index&sourceModule=' + $('#sourceModule').val();
					} else {
						url = response.listviewurl;
					}
					window.location.href = url;
				} else {
					$.unblockUI();
					Vtiger_Helper_Js.showPnotify({
						title: app.vtranslate('JS_DUPLICATE_RECORD'),
						text: response.message
					});
				}
			});
		}
	}, {
		key: 'registerIconEvents',
		value: function registerIconEvents() {
			this.getContentsContainer().find('.js-filter-preferences').on('change', '.js-filter-preference', function (e) {
				var currentTarget = $(e.currentTarget);
				var iconElement = currentTarget.next();
				if (currentTarget.prop('checked')) {
					iconElement.removeClass(iconElement.data('unchecked')).addClass(iconElement.data('check'));
				} else {
					iconElement.removeClass(iconElement.data('check')).addClass(iconElement.data('unchecked'));
				}
			});
		}
	}, {
		key: 'registerBlockToggleEvent',
		value: function registerBlockToggleEvent() {
			var container = this.getContentsContainer();
			container.on('click', '.blockHeader', function (e) {
				var target = $(e.target);
				if (target.is('input') || target.is('button') || target.parents().is('button') || target.hasClass('js-stop-propagation') || target.parents().hasClass('js-stop-propagation')) {
					return false;
				}
				var blockHeader = $(e.currentTarget);
				var blockContents = blockHeader.next();
				var iconToggle = blockHeader.find('.iconToggle');
				if (blockContents.hasClass('d-none')) {
					blockContents.removeClass('d-none');
					iconToggle.removeClass(iconToggle.data('hide')).addClass(iconToggle.data('show'));
				} else {
					blockContents.addClass('d-none');
					iconToggle.removeClass(iconToggle.data('show')).addClass(iconToggle.data('hide'));
				}
			});
		}
	}, {
		key: 'registerColorEvent',
		value: function registerColorEvent() {
			var container = this.getContentsContainer();
			var picker = container.find('.js-color-picker');
			var pickerField = picker.find('.js-color-picker__field');
			var showPicker = function showPicker() {
				App.Fields.Colors.showPicker({
					color: pickerField.val(),
					bgToUpdate: picker.find('.js-color-picker__color'),
					fieldToUpdate: pickerField
				});
			};
			picker.on('click', showPicker);
		}

		/**
   * Get list of fields to duplicates
   * @returns {Array}
   */

	}, {
		key: 'getDuplicateFields',
		value: function getDuplicateFields() {
			var fields = [];
			var container = this.getContentsContainer();
			container.find('.js-duplicates-container .js-duplicates-row').each(function () {
				fields.push({
					fieldid: $(this).find('.js-duplicates-field').val(),
					ignore: $(this).find('.js-duplicates-ignore').is(':checked')
				});
			});
			return fields;
		}
		/**
   * Register events for block "Find duplicates"
   */

	}, {
		key: 'registerDuplicatesEvents',
		value: function registerDuplicatesEvents() {
			var container = this.getContentsContainer();
			App.Fields.Picklist.showSelect2ElementView(container.find('.js-duplicates-container .js-duplicates-field'));
			container.on('click', '.js-duplicates-remove', function (e) {
				$(this).closest('.js-duplicates-row').remove();
			});
			container.find('.js-duplicate-add-field').on('click', function () {
				var template = container.find('.js-duplicates-field-template').clone();
				template.removeClass('d-none');
				template.removeClass('js-duplicates-field-template');
				App.Fields.Picklist.showSelect2ElementView(template.find('.js-duplicates-field'));
				container.find('.js-duplicates-container').append(template);
			});
		}
	}, {
		key: 'registerSubmitEvent',
		value: function registerSubmitEvent(select2Element) {
			var _this2 = this;

			$('#CustomView').on('submit', function (e) {
				var selectElement = _this2.getColumnSelectElement();
				if ($('#viewname').val().length > 100) {
					Vtiger_Helper_Js.showPnotify({
						title: app.vtranslate('JS_MESSAGE'),
						text: app.vtranslate('JS_VIEWNAME_ALERT')
					});
					e.preventDefault();
					return;
				}
				//Mandatory Fields selection validation
				//Any one Mandatory Field should select while creating custom view.
				var mandatoryFieldsList = JSON.parse($('#mandatoryFieldsList').val());
				var selectedOptions = selectElement.val();
				var mandatoryFieldsMissing = true;
				if (selectedOptions) {
					for (var i = 0; i < selectedOptions.length; i++) {
						if ($.inArray(selectedOptions[i], mandatoryFieldsList) >= 0) {
							mandatoryFieldsMissing = false;
							break;
						}
					}
				}
				if (mandatoryFieldsMissing) {
					selectElement.validationEngine('showPrompt', app.vtranslate('JS_PLEASE_SELECT_ATLEAST_ONE_MANDATORY_FIELD'), 'error', 'topLeft', true);
					e.preventDefault();
					return;
				} else {
					select2Element.validationEngine('hide');
				}
				//Mandatory Fields validation ends
				var result = $(e.currentTarget).validationEngine('validate');
				if (result == true) {
					//handled standard filters saved values.
					var stdfilterlist = {};

					if ($('#standardFilterCurrentDate').val() != '' && $('#standardFilterEndDate').val() != '' && $('select.standardFilterColumn option:selected').val() != 'none') {
						stdfilterlist['columnname'] = $('select.standardFilterColumn option:selected').val();
						stdfilterlist['stdfilter'] = $('select#standardDateFilter option:selected').val();
						stdfilterlist['startdate'] = $('#standardFilterCurrentDate').val();
						stdfilterlist['enddate'] = $('#standardFilterEndDate').val();
						$('#stdfilterlist').val(JSON.stringify(stdfilterlist));
					}
					//handled advanced filters saved values.
					var advfilterlist = _this2.advanceFilterInstance.getConditions();
					$('#advfilterlist').val(JSON.stringify(advfilterlist));
					$('[name="duplicatefields"]').val(JSON.stringify(_this2.getDuplicateFields()));
					$('input[name="columnslist"]', _this2.getContentsContainer()).val(JSON.stringify(_this2.getSelectedColumns()));
					_this2.saveAndViewFilter();
					return false;
				} else {
					app.formAlignmentAfterValidation($(e.currentTarget));
				}
			});
		}

		/**
   * Block submit on press enter key
   */

	}, {
		key: 'registerDisableSubmitOnEnter',
		value: function registerDisableSubmitOnEnter() {
			this.getContentsContainer().find('#viewname, [name="color"]').keydown(function (e) {
				if (e.keyCode === 13) {
					e.preventDefault();
				}
			});
		}
	}, {
		key: 'registerEvents',
		value: function registerEvents() {
			var _this3 = this;

			this.registerIconEvents();
			new App.Fields.Text.Editor(this.getContentsContainer().find('.js-editor'));
			this.registerBlockToggleEvent();
			this.registerColorEvent();
			this.registerDuplicatesEvents();
			var select2Element = App.Fields.Picklist.showSelect2ElementView(this.getColumnSelectElement());
			this.registerSubmitEvent(select2Element);
			$('.stndrdFilterDateSelect').datepicker();
			$('#standardDateFilter').on('change', function () {
				_this3.loadDateFilterValues();
			});
			$('#CustomView').validationEngine(app.validationEngineOptions);
			this.registerDisableSubmitOnEnter();
		}
	}]);
	return CustomView;
}();
//# sourceMappingURL=CustomView.min.js.map
