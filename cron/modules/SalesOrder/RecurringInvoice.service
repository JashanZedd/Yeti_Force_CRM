<?php
/*********************************************************************************
  ** The contents of this file are subject to the vtiger CRM Public License Version 1.0
   * ("License"); You may not use this file except in compliance with the License
   * The Original Code is:  vtiger CRM Open Source
   * The Initial Developer of the Original Code is vtiger.
   * Portions created by vtiger are Copyright (C) vtiger.
   * All Rights Reserved.
  *
 ********************************************************************************/
require_once('include/utils/utils.php');
require_once('include/logging.php');

// Get the list of Invoice for which Recurring is enabled.

$db = PearDatabase::getInstance();
$log =& LoggerManager::getLogger('RecurringInvoice');
$log->debug("invoked RecurringInvoice");

$sql = "SELECT 
			so.`salesorderid`,
			recurring_frequency,
			start_period,
			end_period,
			last_recurring_date,
			payment_duration,
			invoice_status 
		FROM
			`vtiger_salesorder` so
			INNER JOIN `vtiger_crmentity` crm  
				ON so.`salesorderid` = crm.`crmid` 
				AND crm.`deleted` = 0 
			INNER JOIN `vtiger_invoice_recurring_info` invoice_rec
				ON so.`salesorderid` = invoice_rec.`salesorderid` 
		WHERE 
			DATE_FORMAT(`start_period`,'%Y-%m-%d') <= ? AND DATE_FORMAT(end_period,'%Y-%m-%d') >= ?;";
$params = array(date('Y-m-d'), date('Y-m-d'));

$result = $db->pquery($sql, $params);
$noOfSalesOrder = $db->num_rows($result);

for( $i=0; $i< $noOfSalesOrder; $i++ ) {
	$salesOrderId		= $db->query_result( $result, $i,'salesorderid' );
	$startPeriod		= $db->query_result( $result, $i,'start_period' );
	$endPeriod			= $db->query_result( $result, $i,'end_period' );
	$lastRecurringDate	= $db->query_result( $result, $i,'last_recurring_date' );
	$recurringFrequency	= $db->query_result( $result, $i,'recurring_frequency' );

	if ( $lastRecurringDate == NULL || $lastRecurringDate == '' || $lastRecurringDate == '0000-00-00' ) {
		$lastRecurringDate = $startPeriod;
	}

	$currentDate = date('Y-m-d');
	if ( strtotime($lastRecurringDate) < strtotime($currentDate) ){
		$lastRecurringDate = $currentDate;
	}

	$currentRecurringDate	= $lastRecurringDate;
	$originalDate			= $lastRecurringDate;

	if ( strtotime($currentRecurringDate) > strtotime($endPeriod) ) {
		continue;
	}

	if ( strtotime($currentRecurringDate) <= strtotime($currentDate) ) {
		$nextRecurringDate = DateTime::createFromFormat( 'Y-m-d', $lastRecurringDate );
		$nextRecurringDate->modify( $recurringFrequency );
	}
	else {
		$nextRecurringDate = DateTime::createFromFormat( 'Y-m-d', $currentRecurringDate );
	}

	$nextRecurringDate = checkAndFixInvoiceDate( $nextRecurringDate, $recurringFrequency, $originalDate );

	$nextRecurringDate = $nextRecurringDate->format( 'Y-m-d' );

	if ( strtotime($currentRecurringDate) == strtotime($currentDate) ) {
		createInvoice($salesOrderId);
	}

	if ( strtotime($nextRecurringDate) != strtotime($lastRecurringDate) ) {
		$sql = 'UPDATE `vtiger_invoice_recurring_info` SET `last_recurring_date` = ? WHERE `salesorderid` = ? LIMIT 1;';
		$params = array($nextRecurringDate, $salesOrderId);
		$db->pquery( $sql, $params );
	}
}

/**
 * Function to create a new Invoice using the given Sales Order id
 * @params <Int> $salesOrderId - record Id of Sales Order
 */
function createInvoice( $salesOrderId ) {
	$current_user  = vglobal('current_user');
	require_once('include/utils/utils.php');
	require_once('include/runtime/Globals.php');
	require_once('modules/SalesOrder/SalesOrder.php');
	require_once('modules/Invoice/Invoice.php');
	require_once('modules/Users/Users.php');

	$log = vglobal('log');
	$db  = PearDatabase::getInstance();

	if(!$current_user) {
		$current_user = Users::getActiveAdminUser();
	}

	$salesOrderRecord = new SalesOrder();
	$salesOrderRecord->id = $salesOrderId;
	$salesOrderRecord->retrieve_entity_info( $salesOrderId, "SalesOrder" );
	foreach( $salesOrderRecord->column_fields as $fieldname => $value ) {
		$salesOrderRecord->column_fields[$fieldname] = decode_html($value);
	}

	$invoiceRecord = new Invoice();
	// This will only fill in the basic columns from SO to Invoice and also Update the SO id in new Invoice
	$invoiceRecord = getConvertSoToInvoice( $invoiceRecord, $salesOrderRecord, $salesOrderId );
	
	// Pick up the Payment due date based on the Configuration in SO
	$paymentDuration = ltrim( $salesOrderRecord->column_fields['payment_duration'], 'payment:' );

	$invoiceDate = date('Y-m-d');
	$dueDate = new DateTime();
	$dueDate->modify( $paymentDuration );
	$dueDate = checkAndFixInvoiceDate( $dueDate, $paymentDuration, $invoiceDate );

	// Cleanup invoiceRecord object, to duplicate the Invoice.
	$invoiceRecord->id = '';
	$invoiceRecord->mode = '';
	$invoiceRecord->column_fields['invoicestatus']	= $salesOrderRecord->column_fields['invoicestatus'];
	$invoiceRecord->column_fields['invoicedate']	= $invoiceDate;
	$invoiceRecord->column_fields['duedate']		= $dueDate->format( 'Y-m-d' );

	// Additional SO fields to copy -> Invoice field name mapped to equivalent SO field name
	$invoiceSOfields = Array (
		'hdnSubTotal'			=> 'hdnSubTotal',
		'hdnGrandTotal'			=> 'hdnGrandTotal',
		'hdnTaxType'			=> 'hdnTaxType',
		'hdnDiscountPercent'	=> 'hdnDiscountPercent',
		'hdnDiscountAmount'		=> 'hdnDiscountAmount',
		'assigned_user_id'		=> 'assigned_user_id',
		'currency_id'			=> 'currency_id',
		'conversion_rate'		=> 'conversion_rate',
	);

	foreach($invoiceSOfields as $invoice_field => $so_field) {
		$invoiceRecord->column_fields[$invoice_field] = $salesOrderRecord->column_fields[$so_field];
	}

	$invoiceRecord->_salesorderid = $salesOrderId;
	$invoiceRecord->_recurring_mode = 'recurringinvoice_from_so';
	$invoiceRecord->save("Invoice");
}

/**
 * This function checks if given date is a business day, not weekend
 * It also checks if the date moved into future correctly
 * 
 * @param <DateTime> $nextRecurringDate - date beign checked if it is business day
 * @param <String> $recurringFrequency - PHP Relative Format - http://php.net/manual/en/datetime.formats.relative.php
 * @param <String|Date> $originalDate - original date to check against next recurring date 
 * @return <DateTime> - closest business day
 */
function checkAndFixInvoiceDate( $nextRecurringDate, $recurringFrequency, $originalDate ) {
	list( $origYear, $origMonth, $origDay ) = explode( '-', $originalDate );

	if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'month') !== false ) {
		// check date if increase in months is correct, for example
		// 2015-01-31 + 1 month = 2015-02-31 => 2015-03-03 which is incorrect
		$incMonthBy = explode( ' ', $recurringFrequency );
		$incMonthBy = ltrim( $incMonthBy[0], '+' );

		if ( !checkdate( $origMonth+$incMonthBy, $origDay, $origYear ) ) {
			// generated date is invalid, switch to last day of last month
			$nextRecurringDate->modify( 'last day of last month' );
		}
	}
	if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'year') !== false ) {
		// check for leap year
		// 2012-02-29 + 1 year = 2013-02-29 => 2013-03-01 which is incorrect
		$incYearBy = explode( ' ', $recurringFrequency );
		$incYearBy = ltrim( $incYearBy[0], '+' );

		if ( !checkdate( $origMonth, $origDay, $origYear+$incYearBy ) ) {
			// generated date is invalid, switch to last day of last month
			$nextRecurringDate->modify( 'last day of last month' );
		}
	}

	// if next recurring date is weekend day
	$dayName = $nextRecurringDate->format( 'l' );
	if ( $dayName == 'Saturday' || $dayName == 'Sunday' ) {
		// + days
		if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'day') !== false ) {
			$nextRecurringDate->modify( 'next monday' );
		}
		// + month
		else if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'month') !== false ) {
			$nextBusinessDayTemp = clone $nextRecurringDate;
			$nextBusinessDayTemp->modify( 'next monday' );

			// if next monday is in next month
			if ( $nextBusinessDayTemp->format('n') != $nextRecurringDate->format('n') ) {
				$nextRecurringDate->modify( 'last friday' );
			}
			else {
				$nextRecurringDate->modify( 'next monday' );
			}
		}
		// + year
		else if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'year') !== false ) {
			$nextBusinessDayTemp = clone $nextRecurringDate;
			$nextBusinessDayTemp->modify( 'next monday' );

			// if next monday is in next month
			if ( $nextBusinessDayTemp->format('y') != $nextRecurringDate->format('y') ) {
				$nextRecurringDate->modify( 'last friday' );
			}
			else {
				$nextRecurringDate->modify( 'next monday' );
			}
		}
		// first day of next month
		else if ( $recurringFrequency == 'first day of next month' ) {
			$nextRecurringDate->modify( 'next monday' );
		}
		// last day of next month
		else if ( $recurringFrequency == 'last day of next month' ) {
			$nextRecurringDate->modify( 'last friday' );
		}
		// first day of +3 months
		else if ( $recurringFrequency == 'first day of +3 months' ) {
			$nextRecurringDate->modify( 'next monday' );
		}
		// last day of +3 months
		else if ( $recurringFrequency == 'last day of +3 months' ) {
			$nextRecurringDate->modify( 'last friday' );
		}
	}

	// check if it is not Public Holiday
	$publicHoliday = Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') );
	if ( $publicHoliday ) {
		// + days
		if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'day') !== false ) {
			do {
				$nextRecurringDate->modify( '+1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
		}
		// + month
		else if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'month') !== false ) {
			$nextBusinessDayTemp = clone $nextRecurringDate;
			do {
				$nextRecurringDate->modify( '+1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );

			// if it went beyond current month
			if ( $nextBusinessDayTemp->format('n') != $nextRecurringDate->format('n') ) {
				$nextRecurringDate = clone $nextBusinessDayTemp;

				do {
					$nextRecurringDate->modify( '-1 day' );
				}
				while(
					$nextRecurringDate->format('l') == 'Sunday' ||
					$nextRecurringDate->format('l') == 'Saturday' ||
					Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
			}
		}
		// + year
		else if ( strpos($recurringFrequency, '+') === 0 && strpos($recurringFrequency, 'year') !== false ) {
			$nextBusinessDayTemp = clone $nextRecurringDate;
			do {
				$nextRecurringDate->modify( '+1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );

			// if it went beyond current month
			if ( $nextBusinessDayTemp->format('y') != $nextRecurringDate->format('y') ) {
				$nextRecurringDate = clone $nextBusinessDayTemp;

				do {
					$nextRecurringDate->modify( '-1 day' );
				}
				while(
					$nextRecurringDate->format('l') == 'Sunday' ||
					$nextRecurringDate->format('l') == 'Saturday' ||
					Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
			}
		}
		// first day of next month
		else if ( $recurringFrequency == 'first day of next month' ) {
			do {
				$nextRecurringDate->modify( '+1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
		}
		// last day of next month
		else if ( $recurringFrequency == 'last day of next month' ) {
			do {
				$nextRecurringDate->modify( '-1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
		}
		// first day of +3 months
		else if ( $recurringFrequency == 'first day of +3 months' ) {
			do {
				$nextRecurringDate->modify( '+1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
		}
		// last day of +3 months
		else if ( $recurringFrequency == 'last day of +3 months' ) {
			do {
				$nextRecurringDate->modify( '-1 day' );
			}
			while(
				$nextRecurringDate->format('l') == 'Sunday' ||
				$nextRecurringDate->format('l') == 'Saturday' ||
				Settings_PublicHoliday_Module_Model::checkIfHoliday( $nextRecurringDate->format('Y-m-d') ) );
		}
	}

	return $nextRecurringDate;
}